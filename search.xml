<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ADB的简单使用技巧（Android）]]></title>
      <url>http://mutouspace.cn/2017/04/16/ADB%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%88Android%EF%BC%89/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">



<h2 id="感谢阅读这篇博文，欢迎关注与评论！"><a href="#感谢阅读这篇博文，欢迎关注与评论！" class="headerlink" title=" 感谢阅读这篇博文，欢迎关注与评论！"></a><strong><em> 感谢阅读这篇博文，欢迎关注与评论！</em></strong></h2><p>   <strong>连接手机和电脑的“脐带”，就是ADB——Android Debug Bridge。</strong></p>
<p>   <strong>？？？？？此处为ADB的简单定义？？？？？？</strong></p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">  

<h2 id="ADB基础"><a href="#ADB基础" class="headerlink" title="ADB基础"></a>ADB基础</h2><pre><code>ADB工具是位于SDK的`platfrom-tools`目录下，因此在命令行中使用ADB的时候，需要通过cd命令，切换到该目录下，或者将
platform-tools的路径添加到系统变量中，这样就可以直接使用了。配置好后，在命令行中输入以下命令。
</code></pre><p>   <img src="http://i.imgur.com/8ToBAAY.png" alt=""></p>
<pre><code>如果显示如下内容，就说明配置成功了。
</code></pre><p>   <img src="http://i.imgur.com/ieZuG7l.png" alt=""></p>
<pre><code>接着，在命令行中输入以下命令。
</code></pre><p>  <img src="http://i.imgur.com/n6D8C6G.png" alt=""></p>
<pre><code>接下来就可以使用shell命令了。（不要问我这里Android这里为什么会出现shell，shell不是在Linux中的吗？因为Android就是就是Linux开发的！）
</code></pre><h2 id="ADB常用命令"><a href="#ADB常用命令" class="headerlink" title="ADB常用命令"></a>ADB常用命令</h2><ul>
<li><p>显示系统中的全部Android平台</p>
<pre><code>C：\User\Administrator&gt;android list targets
</code></pre></li>
<li><p>安装Apk程序（Install）    </p>
<pre><code>adb install -r 应用程序.apk
C：\User\Administrator&gt;adb install -r G:\Test.apk
</code></pre></li>
<li><p>安装Apk程序（Push）</p>
<pre><code>adb push &lt;local&gt;&lt;remote&gt;
C：\User\Administrator&gt;adb push G:\Test.apk /system/app
</code></pre></li>
</ul>
<pre><code>&gt; **区别:**

  以上两种方法都可以将Apk安装到手机上，但也有不同。

    1. adb Install 是将apk安装到 data/data 下，作为普通的用户应用程序。
    2. adb push 不是安装命令，它是将一个文件写入到手机存储系统。因此，只要拥有相应的权限，就可以把任何apk放到任何目录下，甚至
       放到System目录下，成为一个系统应用程序。

&gt; **adb push 补充：**  


   1. 向手机写入文件

        adb push &lt;local&gt;&lt;remote&gt;
        C：\User\Administrator&gt;adb push G:\Test.txt /system/temp/
   2. 从手机获取文件

        adb push &lt;remote&gt;&lt;local&gt;
        C：\User\Administrator&gt;adb push /system/temp/ G:\Test.txt 
</code></pre><ul>
<li><p>删除应用</p>
<pre><code>adb remount （重新挂载系统分区，使系统分区重新可写）
adb shell
cd system/app
rm *.apk
</code></pre></li>
<li><p>查看系统盘符</p>
<pre><code>adb shell df
</code></pre></li>
<li><p>输出所有已经安装的应用</p>
<pre><code>adb shell pm list packages -f
</code></pre></li>
<li><p>模拟按键输入</p>
<pre><code>adb shell input keyevent 
C：\User\Administrator&gt;adb shell input keyevent 3

ps：82 menu   
    3  home
   19  up
   20  down
   21  left
   22  right
   66  enter
   4   back
</code></pre></li>
<li><p>模拟滑动输入</p>
<pre><code>adb shell input touchscreen &lt;x1&gt;&lt;y1&gt;&lt;x2&gt;&lt;y2&gt;
adb shell input touchscreen swipe 18 665 18 350
</code></pre></li>
<li><p>录制屏幕</p>
<pre><code>adb shell screenrecord /sdcard/demo.mp4
</code></pre></li>
<li><p>重新启动</p>
<pre><code>adb reboot  
</code></pre></li>
</ul>
<hr>
<p>更多信息，大家可以去网上去查询！</p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之Struts2框架（一）]]></title>
      <url>http://mutouspace.cn/2017/04/15/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8BStruts2%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="Struts2简介"><a href="#Struts2简介" class="headerlink" title="Struts2简介"></a>Struts2简介</h1><h2 id="Struts2概述"><a href="#Struts2概述" class="headerlink" title="Struts2概述"></a>Struts2概述</h2><p>Struts2是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架。</p>
<h2 id="Struts2的来历"><a href="#Struts2的来历" class="headerlink" title="Struts2的来历"></a>Struts2的来历</h2><p><strong>Struts1：</strong>也是apache开发的一套mvc的开源框架。在2005年之前非常流行。</p>
<p> 弊端：Struts1的核心控制器就是一个Servlet。随着使用者的增多，弊端开始出现。</p>
<p><strong>Struts2：</strong>在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。<em>里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。</em></p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="搭建Struts2开发环境"><a href="#搭建Struts2开发环境" class="headerlink" title="搭建Struts2开发环境"></a>搭建Struts2开发环境</h1><h2 id="下载Struts2开发包"><a href="#下载Struts2开发包" class="headerlink" title="下载Struts2开发包"></a>下载Struts2开发包</h2><p><a href="http://struts.apache.org" target="_blank" rel="external">官网：http://struts.apache.org</a></p>
<p>由于国内网络比较好，所以说可能有时候打不开，可以百度一下，下载一份。</p>
<h2 id="开发包目录结构"><a href="#开发包目录结构" class="headerlink" title="开发包目录结构"></a>开发包目录结构</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%BC%80%E5%8F%91%E5%8C%85%E7%9B%AE%E5%BD%951.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="拷贝必要jar包到classpath中"><a href="#拷贝必要jar包到classpath中" class="headerlink" title="拷贝必要jar包到classpath中"></a>拷贝必要jar包到classpath中</h3><p>   <img src="http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6jar%E5%8C%851.png" alt=""></p>
<p>   <strong>拷贝哪些jar包？</strong></p>
<p>   找到Struts2自带的例子中，struts-blank的war包，在它的<code>\WEB-INF\lib</code>目录下的jar包全拷贝。</p>
<h3 id="建立Struts2的配置文件"><a href="#建立Struts2的配置文件" class="headerlink" title="建立Struts2的配置文件"></a>建立Struts2的配置文件</h3><p>  at the top of classpath（在最顶层的构建路径）,建立一个默认名称为<code>struts.xml</code>的配置文件。</p>
<p>  struts.xml </p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE struts PUBLIC
&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
 &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;
&lt;struts&gt;

&lt;/struts&gt;
</code></pre><p>   <strong>注意：</strong></p>
<ul>
<li>文件名大小写。</li>
<li>创建位置。</li>
<li>该名称允许修改，但是我们一般不改。</li>
</ul>
<h3 id="配置控制器"><a href="#配置控制器" class="headerlink" title="配置控制器"></a>配置控制器</h3><p>a、配置位置：在web.xml中</p>
<p>b、配置什么： struts2已经写好了的一个过滤器。</p>
<p><strong>结论：</strong></p>
<p>struts2比struts1优秀的一个体现就是，它用了更为强大的<code>过滤器</code>作为控制器了。</p>
<pre><code>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;
&lt;display-name&gt;Struts2Template&lt;/display-name&gt;
 &lt;!-- 配置Struts核心控制器，就是一个过滤器 --&gt;
 &lt;filter&gt;
&lt;filter-name&gt;struts2&lt;/filter-name&gt;
&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
&lt;filter-name&gt;struts2&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
&lt;welcome-file-list&gt;
  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
&lt;/web-app&gt;
</code></pre><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p>部署应用，启动Tomcat，不报错表示搭建成功。</p>
<h1 id="第一个Struts2案例"><a href="#第一个Struts2案例" class="headerlink" title="第一个Struts2案例"></a>第一个Struts2案例</h1><blockquote>
<p>以下步骤是日后实际开发中经常重复的。</p>
</blockquote>
<h2 id="建立一个jsp文件"><a href="#建立一个jsp文件" class="headerlink" title="建立一个jsp文件"></a>建立一个jsp文件</h2><p><em>index.jsp</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
&lt;title&gt;Struts入门案例&lt;/title&gt;
  &lt;/head&gt; 
 &lt;body&gt;
&lt;a href=&quot;${pageContext.request.contextPath}/hello.action&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;
&lt;a href=&quot;${pageContext.request.contextPath}/hello&quot;&gt;访问Struts的第一个入门案例&lt;/a&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="在struts-xml文件中配置"><a href="#在struts-xml文件中配置" class="headerlink" title="在struts.xml文件中配置"></a>在struts.xml文件中配置</h2><p><em>struts.xml</em></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE struts PUBLIC
&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;
&lt;struts&gt;
  &lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; &gt;
  &lt;!-- 
    name:jsp对应的请求地址；
    class:指定一个动作类，在这里也就是给hello指定一个动作类
    method: 对应hello要执行的方法。
   --&gt;
 &lt;action name=&quot;hello&quot; class=&quot;cn.terry.web.action.HelloAction&quot; method=&quot;sayHello&quot;&gt;
    &lt;!-- 配置结果视图 --&gt;
   &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;
 &lt;/action&gt;
  &lt;/package&gt;
&lt;/struts&gt;
</code></pre><h2 id="建立动作类和动作方法"><a href="#建立动作类和动作方法" class="headerlink" title="建立动作类和动作方法"></a>建立动作类和动作方法</h2><p><em>HelloAction.java</em></p>
<pre><code> package cn.terry.web.action;

 public class HelloAction {//动作类

/**
 * 在动作类中的指定的动作方法
 * 动作方法的书写要求：
 *         1、都是public的
 *         2、返回值必须是一个String
 *         3、必须没有参数
 * @return
 */
public String sayHello(){
    System.out.println(&quot;HelloAction的sayHello方法执行了&quot;);
    return &quot;success&quot;;//与配置文件中result的name取值相对应
}
}
</code></pre><h2 id="结果视图页面"><a href="#结果视图页面" class="headerlink" title="结果视图页面"></a>结果视图页面</h2><p><em>success.jsp</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
&lt;title&gt;title&lt;/title&gt;

&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;
&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;
&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;
&lt;!--
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;
 --&gt;

  &lt;/head&gt;

  &lt;body&gt;
操作成功
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>只要没有错误，这里就可以得到自己想要的结果。</p>
<h2 id="关于struts-xml没有代码提示的问题"><a href="#关于struts-xml没有代码提示的问题" class="headerlink" title="关于struts.xml没有代码提示的问题"></a>关于struts.xml没有代码提示的问题</h2><p>分析原因：没有找到对应的dtd约束文件。</p>
<p>解决办法：</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/dtd1.png" alt=""></p>
<p>在网上找到struts的.dtd包，放到如图目录中，这个包在网上找就可以。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/dtd2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>    
<p>ok就可以了。                    </p>
<h2 id="第一个案例的执行过程"><a href="#第一个案例的执行过程" class="headerlink" title="第一个案例的执行过程"></a>第一个案例的执行过程</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/struts2%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Struts2的配置文件"><a href="#Struts2的配置文件" class="headerlink" title="Struts2的配置文件"></a>Struts2的配置文件</h1><h2 id="加载时机："><a href="#加载时机：" class="headerlink" title="加载时机："></a>加载时机：</h2><p>当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。</p>
<h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><p><strong>加载顺序：</strong>default.properties——struts-default.xml——plugins配置——struts.xml——struts.properties——web.xml</p>
<table><br><tr><td>顺序</td><td>配置文件名</td><td>所在位置</td><td>说明</td></tr><br><tr><td>1</td><td>default.properties</td><td>struts2-core-2.3.15.3.jar\org\apache\struts2</td><td>    不能修改</td></tr><br><tr><td>2</td><td>struts-default.xml</td><td>struts2-core-2.3.15.3.jar</td><td>    不能修改</td></tr><br><tr><td>3</td><td>strtuts-plugin.xml</td><td>在struts2提供的插件jar包中</td><td>    不能修改</td></tr><br><tr><td>4</td><td>struts.xml</td><td>我们的应用中</td><td>    我们修改的：推荐</td></tr><br><tr><td>5</td><td>struts.properties</td><td>我们的应用中</td><td>    我们修改的</td></tr><br><tr><td>6</td><td>web.xml</td><td>我们的应用中</td><td>    我们修改的，可以给过滤器配置参数</td></tr><br></table>

<p><strong>注意：</strong></p>
<p>1、Struts2提供了两种配置的方式。一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。<code>我们推荐使用xml文件（它能描述层级关系）。</code></p>
<p>2、当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。</p>
<h1 id="Struts2框架提供的常量"><a href="#Struts2框架提供的常量" class="headerlink" title="Struts2框架提供的常量"></a>Struts2框架提供的常量</h1><h2 id="常用的常量"><a href="#常用的常量" class="headerlink" title="常用的常量"></a>常用的常量</h2><p>常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。</p>
<p>常用的：</p>
<table><br><tr><td>常量名</td><td>常量值</td><td>说明</td></tr><br><tr><td>struts.i18n.encoding</td><td>UTF-8</td><td>应用中使用的编码</td></tr><br><tr><td>struts.objectFactory.spring.autoWire</td><td>name</td><td>和spring框架整合有关</td></tr><br><tr><td>struts.multipart.parser    </td><td>jakarta</td><td>    指定文件上传用的组件</td></tr><br><tr><td>struts.multipart.maxSize</td><td>    2097152    </td><td>文件上传总文件大小限制：2M</td></tr><br><tr><td>struts.action.extension</td><td>    action</td><td>    能进入Struts2框架内部的url地址后缀名。多个值用逗号分隔</td></tr><br><tr><td>struts.enable.DynamicMethodInvocation</td><td>    false</td><td>    是否允许动态方法调用</td></tr><br><tr><td>struts.devMode</td><td>    false</td><td>    是否是开发模式。开发模式：改了配置文件，不需要重启。输出更多的错误信息。开发阶段建议为true。</td></tr><br><tr><td>struts.ui.theme</td><td>    xhtml</td><td>    页面展示用的主题</td></tr></table>

<h2 id="在struts-xml中覆盖常量"><a href="#在struts-xml中覆盖常量" class="headerlink" title="在struts.xml中覆盖常量"></a>在struts.xml中覆盖常量</h2><p>使用<code>&lt;constant name=&quot;&quot; value=&quot;&quot;&gt;&lt;/constant&gt;</code>元素进行覆盖</p>
<p>例如：</p>
<pre><code>&lt;!-- 修改struts中默认的后缀名 --&gt;
&lt;constant name=&quot;struts.action.extension&quot; value=&quot;do&quot;&gt;&lt;/constant&gt;
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/struts%E8%A6%86%E7%9B%96.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="创建struts-properties文件覆盖"><a href="#创建struts-properties文件覆盖" class="headerlink" title="创建struts.properties文件覆盖"></a>创建struts.properties文件覆盖</h2><p>在应用的构建路径中创建一个struts.properties的文件。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/pro%E8%A6%86%E7%9B%96.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="struts-xml配置文件的主要元素"><a href="#struts-xml配置文件的主要元素" class="headerlink" title="struts.xml配置文件的主要元素"></a>struts.xml配置文件的主要元素</h1><h2 id="package元素"><a href="#package元素" class="headerlink" title="package元素"></a>package元素</h2><ol>
<li><p>属性：</p>
<p><strong>name：</strong>包的名称。必须写。且必须唯一。</p>
<p><strong>extends：</strong>一般情况下需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能。</p>
<pre><code>struts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。
</code></pre><p><strong>abstract：</strong>把包声明为抽象包，抽象包就是用来被继承的。只要是没有<action>元素的包，就可以声明为抽象包。</action></p>
<p><strong>namespace：</strong>名称空间。</p>
<pre><code>`名称空间    +    动作名称    =    访问路径`
</code></pre><p><em>struts.xml代码片段</em>    </p>
<pre><code>&lt;!-- 
  package元素：是定义一个struts的包，它是把配置文件按照面向对象的思想来管理。分模块开发。
  name属性：包的名称。具有唯一性。
  extends属性：指定当前包的父包。它是按照面向对象的思想管理的体现。
  abstract属性：把包声明为一个抽象包。抽象包是用来被继承的。只有没有action元素的包才能被定义为抽象包。
  namespace属性：名称空间。当指定了名称空间以后，访问路径就变成了：
                                            访问路径 = 名称空间+动作名称。
                                      当不指定该属性时，该属性有默认值，默认值是&quot;&quot;,不是&quot;/&quot;.                                 
 --&gt;
&lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; namespace=&quot;/user&quot;&gt;                    
</code></pre></li>
<li><p>packege中的namespace详解</p>
<p> namespace的默认值：</p>
<pre><code>a.不写该属性

b.写了该属性，取值是一个&quot;&quot;.注意：默认值不是/
</code></pre></li>
<li><p>动作类的搜索顺序：</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt=""></p>
</li>
</ol>
<h2 id="action元素"><a href="#action元素" class="headerlink" title="action元素"></a>action元素</h2><ol>
<li><p>属性：</p>
<p>name：动作名称</p>
<p>class：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport,是在struts-default.xml中定义的,要想替换默认动作类：在应用的struts.xml中，package中加入：</p>
<p>method：动作类中的方法名称。默认是public String execute(){}</p>
<pre><code>要求：
    1.public的
    2.返回值必须是String
    3.没有参数
</code></pre><p><em>struts.xml代码片段</em></p>
<pre><code> &lt;!-- 
    action元素：是用于定义动作名称，动作类和动作方法的映射。以及当出现不同情况时前往指定的结果视图。
    name属性：动作名称。和jsp中请求的url中的名称对应起来。注意：此处不能写 .action
    class属性：指定的动作类。
    method属性：动作类中的方法名称。默认是public String execute(){}
              要求：
                  1.public的
                  2.返回值必须是String
                  3.没有参数
   --&gt;
&lt;action name=&quot;action1&quot; class=&quot;cn.terry.web.action.DemoAction1&quot; method=&quot;saveUser&quot;&gt;
</code></pre></li>
<li><p>动作类</p>
<p>a.方式一：动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean。</p>
<p>b.方式二：动作类实现com.opensymphony.xwork2.Action接口。</p>
<p>常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。</p>
<table><br><tr><td>常量变量名</td><td>    对应的值</td><td>    说明</td></tr><br><tr><td>SUCCESS</td><td>    success</td><td>    动作方法执行一切OK</td></tr><br><tr><td>ERROR    </td><td>error</td><td>    动作方法执行时遇到了异常</td></tr><br><tr><td>INPUT</td><td>    input</td><td>    回显</td></tr><br><tr><td>LOGIN</td><td>    login</td><td>    一般转向登陆页面</td></tr><br><tr><td>NONE    </td><td>none</td><td>    不转向任何的视图</td></tr></table>

<p>c.方式三：动作类继承com.opensymphony.xwork2.ActionSupport    推荐使用</p>
</li>
<li><p>动作的访问</p>
<p>a.使用通配符：</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/action11.png" alt=""></p>
<p>升级版：</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/action12.png" alt="">    </p>
<p>优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。</p>
<p>b.动态方法调用</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/action13.png" alt=""></p>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/action14.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="result元素"><a href="#result元素" class="headerlink" title="result元素"></a>result元素</h2><ol>
<li><p>属性：</p>
<p> name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 </p>
<p> type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。</p>
<p> <em>struts.xml</em></p>
<pre><code>&lt;!--
 result元素：配置逻辑结果视图；
 name属性：逻辑视图的名称，对应着动作方法的返回值。默认值是success。 
 type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。
                      常用取值：
         dispatcher：(默认值)
          使用请求转发，转向一个页面。
         redirect：
          使用重定向，转向一个页面。
  --&gt;
&lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;
</code></pre></li>
<li><p>result元素中type的取值</p>
<p>常用结果类型介绍：</p>
<p>dispatcher：(默认值)使用请求转发，转向一个页面。</p>
<p>redirect：使用重定向，转向一个页面。</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/redirect.png" alt=""></p>
<p>redirectAction：注意：使用的是重定向。</p>
<p>a.重定向到另一个相同名称空间的动作。</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/redirectAction1.png" alt=""></p>
<p>b.重定向到不同名称空间的动作</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/redirectAction2.png" alt=""></p>
<p>chain：注意： 使用的是请求转发。</p>
<p>a.转发到另一个相同名称空间的动作。</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/chain1.png" alt="">    </p>
<p>b.请求转发到不同名称空间的动作    </p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/chain2.png" alt=""></p>
</li>
</ol>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 框架 </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之框架前述]]></title>
      <url>http://mutouspace.cn/2017/04/15/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A1%86%E6%9E%B6%E5%89%8D%E8%BF%B0/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<blockquote>
<p>本篇文章是对学习框架前的开题篇。</p>
</blockquote>
<p>内容为：</p>
<ul>
<li>框架概述</li>
<li>三层架构</li>
<li>控制器：MVC中的控制器</li>
<li>案例中的问题</li>
</ul>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h1><p><strong>框架的意义与作用：</strong></p>
<p>  所谓<code>框架</code>，就是<strong>把一些繁琐的重复性代码封装起来</strong>，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。<br>  特点：封装了很多细节，程序员在使用的时候会非常简单。</p>
<h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/01Struts2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>表现层：M model V view C control
业务层：service
持久层：dao  data access object
Struts2在三层架构中的位置是处于表现层。Struts2只是一个表现层框架。
</code></pre><h1 id="控制器：MVC中的控制器"><a href="#控制器：MVC中的控制器" class="headerlink" title="控制器：MVC中的控制器"></a>控制器：MVC中的控制器</h1><h2 id="MVC回顾"><a href="#MVC回顾" class="headerlink" title="MVC回顾"></a>MVC回顾</h2><pre><code>M：Model 模型，封装数据。javabean
V：view    视图，展示界面。jsp
C：Controller 控制器，控制程序流程。Servlet
</code></pre><h2 id="Servlet和Filter"><a href="#Servlet和Filter" class="headerlink" title="Servlet和Filter"></a>Servlet和Filter</h2><p><strong>Servlet:</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/servlet.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>Filter：</strong></p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/filter.png" alt=""></p>
<p><strong>总结：</strong></p>
<p>Servlet能做的事情，过滤器也可以做到。并且过滤器比Servlet还多了一个放行的功能，因此过滤器比Servlet功能更为强大。<br>结论就是：过滤器同样也适合做控制器。</p>
<h1 id="案例中的问题"><a href="#案例中的问题" class="headerlink" title="案例中的问题"></a>案例中的问题</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>规律：</strong></p>
<pre><code>1. 获取请求正文，用户要做什么事情
2. 根据不同的请求，做出不同的判断
3. 执行具体的方法代码（*动作*）
4. 转向页面，展示给用户
</code></pre><p><strong>缺陷：</strong></p>
<pre><code>1. 重复性劳动太多，具体的执行代码也有冗余代码。
2. 到底要做什么全是硬编码，像用户要做什么事情，对应执行什么代码，可以写在配置文件中。
3. 具体的代码方法放到了控制器中，过于臃肿。
</code></pre></the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之常用的数据源配置]]></title>
      <url>http://mutouspace.cn/2017/04/02/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p><strong>常用的数据源配置：</strong></p>
<ul>
<li>DBCP</li>
<li>C3P0</li>
<li>用JavaWeb服务器管理数据源：Tomcat</li>
</ul>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h1><blockquote>
<p>DBCP：Apache推出的Database Connection Pool</p>
</blockquote>
<p><strong>使用步骤：</strong></p>
<ol>
<li><p>添加jar包:</p>
<p>  commons-dbcp-1.4.jar<br>  commons-pool-1.5.6.jar</p>
<p> (这两个jar包网上一搜有很多，如果找不到合适的，读者可以email我，我发给大家！)</p>
</li>
<li>添加属性资源文件</li>
<li>编写数据源工具类</li>
</ol>
<p>简例架构：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/DBCP.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>添加属性资源文件：</p>
<p>dbcpconfig.properties</p>
<p>注：这个文件也是去网上搜索，拿来直接用就可以了。</p>
<p><em>dbcpconfig.properties</em></p>
<pre><code>连接设置
driverClassName=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/day16
username=root
password=

&lt;!-- 初始化连接 --&gt;
initialSize=10

最大连接数量
maxActive=50

&lt;!-- 最大空闲连接 --&gt;
maxIdle=20

&lt;!-- 最小空闲连接 --&gt;
minIdle=5

&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;
maxWait=60000

JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;] 
注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。
connectionProperties=useUnicode=true;characterEncoding=utf8

指定由连接池所创建的连接的自动提交（auto-commit）状态。
defaultAutoCommit=true

driver default 指定由连接池所创建的连接的只读（read-only）状态。
如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）
defaultReadOnly=

driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。
可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE
defaultTransactionIsolation=REPEATABLE_READ
</code></pre><p>编写数据源工具类</p>
<p><em>DBCPUtil.java</em></p>
<pre><code>package cn.terry.utils;

import java.io.IOException;
import java.security.spec.DSAGenParameterSpec;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;

public class DBCPUtil {

private static DataSource ds = null;

static{
    Properties prop = new Properties();
    //根据DBCPUtil的classes的路径，加载配置文件
    try {
        prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));
        ds = BasicDataSourceFactory.createDataSource(prop);//得到一个数据源
    } catch (Exception e) {
        throw new ExceptionInInitializerError(&quot;初始化错误，请检查配置文件&quot;);
    }        
}

public static Connection getConnection() {
    try {
        return ds.getConnection();
    } catch (SQLException e) {
        throw new RuntimeException(&quot;服务器忙。。。&quot;);
    }
    }
public static void release(Connection conn,Statement stmt,ResultSet rs){
    //关闭资源
            if(rs!=null){
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                rs = null;
            }
            if(stmt!=null){
                try {
                    stmt.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                stmt = null;
            }
            if(conn!=null){
                try {
                    conn.close();//关闭
                } catch (Exception e) {
                    e.printStackTrace();
                }
                conn = null;
            }
}

}
</code></pre><p>testJDBC.java</p>
<pre><code>package cn.terry.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.junit.Test;


import cn.terry.utils.DBCPUtil;

public class testJDBC {

@Test
public void test1() {
    Connection conn = null;
    PreparedStatement ps = null;


    try {
        conn = DBCPUtil.getConnection();
        ps = conn.prepareStatement(&quot;..&quot;);
    } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }finally {
        DBCPUtil.release(conn, ps, null);
    }

}

}
</code></pre><h1 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h1><p>这个是建立的java项目。</p>
<p><strong> 简例结构图：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/C3P0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong> 使用步骤：</strong></p>
<p>1、添加jar包 </p>
<p>   jar包也是去网上搜。</p>
<p>2、编写配置文件</p>
<p>c3p0-config.xml，放在classpath中，或classes目录中</p>
<p><em>c3p0-config.xml</em></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;c3p0-config&gt;
  &lt;default-config&gt;
&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;
&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/mytest&lt;/property&gt;
&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;
&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;
&lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;
&lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;
&lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;
&lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;

  &lt;/default-config&gt;

&lt;/c3p0-config&gt;
</code></pre><p>3、编写工具类：</p>
<p><em>C3P0Util.java</em></p>
<pre><code>package cn.terry.utils;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import com.mchange.v2.c3p0.ComboPooledDataSource;

public class C3P0Util {

//得到一个数据源
    private static DataSource dataSource = new ComboPooledDataSource();

    //从数据源中得到一个连接对象
    public static Connection getConnection(){
        try {
            return dataSource.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException(&quot;服务器错误&quot;);
        }
    }

    public static void release(Connection conn,Statement stmt,ResultSet rs){
        //关闭资源
                if(rs!=null){
                    try {
                        rs.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    rs = null;
                }
                if(stmt!=null){
                    try {
                        stmt.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    stmt = null;
                }
                if(conn!=null){
                    try {
                        conn.close();//关闭
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    conn = null;
                }
    }
}
</code></pre><p><em>TestCRUD.java</em></p>
<pre><code>package cn.terry.utils;

import java.sql.Connection;
import java.sql.PreparedStatement;

import org.junit.Test;

public class TestCRUD {
@Test
public void testInsert(){
    Connection conn = null;
    PreparedStatement ps = null;

    try {
        conn = C3P0Util.getConnection();
        ps = conn.prepareStatement(&quot;insert into account(name,money) values(&apos;ggg&apos;,2000)&quot;);
        ps.executeUpdate();
    } catch (Exception e) {
        e.printStackTrace();
    }finally{
        C3P0Util.release(conn, ps, null);

    }


    System.out.println(conn.getClass().getName());
}

}
</code></pre><h1 id="用JavaWeb服务器管理数据源：Tomcat"><a href="#用JavaWeb服务器管理数据源：Tomcat" class="headerlink" title="用JavaWeb服务器管理数据源：Tomcat"></a>用JavaWeb服务器管理数据源：Tomcat</h1><p>开发JavaWeb应用，必须使用一个JavaWeb服务器，JavaWeb服务器都内置数据源。</p>
<p>Tomcat：（DBCP）</p>
<p>数据源只需要配置服务器即可。</p>
<p> 配置数据源的步骤：</p>
<p> 1、拷贝数据库连接的jar到tomcatlib目录下</p>
<p> 2、配置数据源XML文件</p>
<ul>
<li><p>(<strong>全局配置</strong>)如果把配置信息写在tomcat下的conf目录的context.xml中，那么所有应用都能使用此数据源。</p>
<p>1）在tomcat的conf文件夹下的context.xml配置文件中加入：</p>
<pre><code>&lt;Resource name=&quot;jndi/mybatis&quot;   
 auth=&quot;Container&quot;   
 type=&quot;javax.sql.DataSource&quot;   
 driverClassName=&quot;com.mysql.jdbc.Driver&quot;   
 url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   
 username=&quot;root&quot;   
 password=&quot;123456&quot;   
 maxActive=&quot;20&quot;   
 maxIdle=&quot;10&quot;   
 maxWait=&quot;10000&quot;/&gt;      
</code></pre><p>2)在项目的web.xml中加入资源引用：</p>
<pre><code>&lt;resource-ref&gt;  
&lt;description&gt;JNDI DataSource&lt;/description&gt;  
&lt;res-ref-name&gt;jndi/mybatis&lt;/res-ref-name&gt;  
&lt;res-ref-type&gt;javax.sql.DataSource&lt;/res-ref-type&gt;  
&lt;res-auth&gt;Container&lt;/res-auth&gt;  
&lt;/resource-ref&gt;  
</code></pre><p><em>其中res-ref-name值要和context.xml的name值一致。</em></p>
<p>3）jndi测试方法：</p>
<pre><code>public void testJNDI() throws NamingException, SQLException{  
   Context ctx = new InitialContext();  
   DataSource ds = (DataSource) ctx.lookup(&quot;java:comp/env/jndi/mybatis&quot;);  
   Connection conn = ds.getConnection();  
   System.out.println(conn.isClosed());  
   }  
</code></pre><p>4）在jsp中调用加载jndi方式，不可以直接用main方法测试，必须通过启动容器从jsp中调用：</p>
<pre><code>TestPageAccessURL test = new TestPageAccessURL();  
test.testJNDI();  
</code></pre></li>
</ul>
<ul>
<li><p>（<strong>局部配置1</strong>）如果是在当前应用的META-INF中创建context.xml, 编写数据源，那么只有当前应用可以使用。</p>
<p>1）在项目的META-INFO下面新建context.xml。加入：</p>
<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
  &lt;Context&gt;  
   &lt;Resource name=&quot;jndi/mybatis&quot;   
 auth=&quot;Container&quot;   
 type=&quot;javax.sql.DataSource&quot;   
 driverClassName=&quot;com.mysql.jdbc.Driver&quot;   
 url=&quot;jdbc:mysql://localhost:3306/appdb&quot;   
 username=&quot;root&quot;   
 password=&quot;123456&quot;   
 maxActive=&quot;20&quot;   
 maxIdle=&quot;10&quot;   
 maxWait=&quot;10000&quot;/&gt;      
&lt;/Context&gt;  
</code></pre><p>其他配置同第一种方式。</p>
</li>
</ul>
<p><strong>局部配置2</strong>（不推荐）。</p>
<p>1）在tomcat的server.xml的<host>标签内，添加：</host></p>
<pre><code>&lt;Context path=&quot;/demo_jndi&quot; docBase=&quot;/demo_jndi&quot;&gt;  
&lt;Resource  
 name=&quot;jndi/mybatis&quot;  
 type=&quot;javax.sql.DataSource&quot;  
 driverClassName=&quot;com.mysql.jdbc.Driver&quot;  
 maxIdle=&quot;2&quot;  
 maxWait=&quot;5000&quot;  
 username=&quot;root&quot;  
 password=&quot;123456&quot;  
 url=&quot;jdbc:mysql://localhost:3306/appdb&quot;  
 maxActive=&quot;4&quot;/&gt;  
 &lt;/Context&gt;  
</code></pre><p>其他配置同第一种方式。</p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 连接池 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之Jsp]]></title>
      <url>http://mutouspace.cn/2017/03/29/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8BJsp/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="Jsp-简介"><a href="#Jsp-简介" class="headerlink" title="Jsp 简介"></a>Jsp 简介</h1><blockquote>
<p>JSP全称是Java Server Pages，它和servle技术一样，都是SUN公司定义的一种用于开发动态web资源的技术。<strong>JSP实际上就是Servlet。</strong></p>
</blockquote>
<p><strong><em>jsp = html + java</em></strong></p>
<p><strong>html:</strong>静态内容</p>
<p><strong>servlet：</strong>服务器端的小应用程序。适合编写java逻辑代码，如果编写网页内容–苦逼。</p>
<p><strong>jsp:</strong>适合编写输出动态内容，但不适合编写java逻辑。</p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="jsp的原理"><a href="#jsp的原理" class="headerlink" title="jsp的原理"></a>jsp的原理</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/jsp1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="JSP-语法-3、6、9"><a href="#JSP-语法-3、6、9" class="headerlink" title="JSP 语法(3、6、9)"></a>JSP 语法(3、6、9)</h1><blockquote>
<p>接下来就是JSP的3（jsp的3个指令）6（jsp的6个动作）9（jsp的9个内置对象）了，简称：三六九。</p>
</blockquote>
<h2 id="JSP的脚本"><a href="#JSP的脚本" class="headerlink" title="JSP的脚本"></a>JSP的脚本</h2><ol>
<li>小脚本: &lt;% java代码 %&gt;</li>
<li>表达式: &lt;%= 2+3 %&gt; 等价于out.print(2+3);  </li>
<li>声明:   &lt;%! %&gt; 表示在类中定义全局成员，和静态块。</li>
</ol>
<p>1、脚本程序的语法格式及示例：</p>
<pre><code>&lt;% 代码片段 %&gt;

&lt;%
out.println(&quot;Your IP address is &quot; + request.getRemoteAddr());
%&gt;
</code></pre><p>2、表达式示例：</p>
<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;ISO-8859-1&quot;%&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;

  &lt;body&gt;
   &lt;%
   Date date = new Date();
   out.write(date.toLocaleString());
 %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>3、声明示例：</p>
<blockquote>
<p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p>
</blockquote>
<pre><code>&lt;%! int i = 0; %&gt; 
&lt;%! int a, b, c; %&gt; 
&lt;%! Circle a = new Circle(2.0); %&gt; 
</code></pre><h2 id="JSP-指令（3）"><a href="#JSP-指令（3）" class="headerlink" title="JSP 指令（3）"></a>JSP 指令（3）</h2><p>JSP中的三种指令标签：</p>
<table><br><tr><td>指令</td><td>    描述</td></tr><br><tr><td>  page  </td><td>    定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><br><tr><td>  include  </td><td>    包含其他文件</td></tr><br><tr><td> taglib  </td><td>    引入标签库的定义</td></tr><br></table>

<h3 id="Page指令"><a href="#Page指令" class="headerlink" title="Page指令"></a>Page指令</h3><blockquote>
<p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p>
</blockquote>
<p>Page指令的语法格式：</p>
<pre><code>&lt;%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%&gt;
或者：
&lt;%@ 指令名称 属性1=“属性值1”%&gt;
&lt;%@ 指令名称 属性2=“属性值2”%&gt;
</code></pre><p>如：</p>
<pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
或者：
&lt;%@ page language=&quot;java&quot; %&gt;
&lt;%@ page import=&quot;java.util.*&quot; %&gt;
</code></pre><p>与Page指令相关的属性：</p>
<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>buffer</td><td>    JSP中有javax.servlet.jsp.JspWriter输出字符流。指定out对象使用缓冲区的大小,默认是8kb.</td></tr><br><tr><td>autoFlush</td><td>    控制out对象的 缓存区</td></tr><br><tr><td>contentType</td><td>    指定当前JSP页面的MIME类型和字符编码，等同于response.setContextType(“text/html;charset=utf-8”);</td></tr><br><tr><td>errorPage</td><td>    指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><br><tr><td>isErrorPage</td><td>    指定当前页面是否可以作为另一个JSP页面的错误处理页面，默认是false。</td></tr><br><tr><td>extends</td><td>    指定servlet从哪一个类继承</td></tr><br><tr><td>import</td><td>    导入要使用的Java类,和java代码中的import是一样的</td></tr><br><tr><td>info</td><td>    定义JSP页面的描述信息</td></tr><br><tr><td>isThreadSafe</td><td>    指定对JSP页面的访问是否为线程安全</td></tr><br><tr><td>language</td><td>    定义JSP页面所用的脚本语言，默认是Java</td></tr><br><tr><td>session</td><td>    指定JSP页面是否使用session,默认值是true</td></tr><br><tr><td>isELIgnored</td><td>    指定是否执行EL表达式</td></tr><br><tr><td>isScriptingEnabled</td><td>    确定脚本元素能否被使用</td></tr><br><tr><td>pageEncoding</td><td>    告诉JSP引擎要翻译的文件使用的编码</td></tr><br></table>

<p> <strong>注：</strong></p>
<ol>
<li>errorPage：errorPage=”/uri” 如果写“/”则代表<em>当前应用</em>的目录下，<em>绝对路径</em>。<br>如果不写“/”则代表<em>相对路径</em>。</li>
</ol>
<h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><blockquote>
<p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p>
</blockquote>
<p>静态包含：把其它资源包含到当前页面中。</p>
<pre><code>&lt;%@ include file=&quot;/include/header.jsp&quot; %&gt;
</code></pre><p>动态包含：</p>
<pre><code>&lt;jsp:include page=&quot;/include/header.jsp&quot;&gt;&lt;/jsp:include&gt;
</code></pre><p>两者的区别：翻译的时间段不同</p>
<p>前者：在翻译时就把两个文件合并</p>
<p>后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。</p>
<p>原则：能用静的就不用动的。</p>
<h3 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h3><p><strong>作用：</strong>在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。</p>
<pre><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt; 
</code></pre><h2 id="JSP-动作元素（6）"><a href="#JSP-动作元素（6）" class="headerlink" title="JSP 动作元素（6）"></a>JSP 动作元素（6）</h2><blockquote>
<p> 使用标签的形式来表示一段java代码。</p>
</blockquote>
<ul>
<li><code>&lt;jsp:include &gt;</code> 动态包含 </li>
<li><code>&lt;jsp:forward&gt;</code> 请求转发 </li>
<li><code>&lt;jsp:param&gt;</code> 设置请求参数</li>
<li><code>&lt;jsp:useBean&gt;</code> 创建一个对象</li>
<li><code>&lt;jsp:setProperty&gt;</code> 给指定的对象属性赋值</li>
<li><code>&lt;jsp:getProperty&gt;</code> 取出指定对象的属性值</li>
</ul>
<h3 id="动作元素-jsp-include"><a href="#动作元素-jsp-include" class="headerlink" title="动作元素(jsp:include)"></a>动作元素(jsp:include)</h3><blockquote>
<p><jsp:include>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。</jsp:include></p>
</blockquote>
<p>语法格式如下：</p>
<pre><code>&lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;
</code></pre><table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    包含在页面中的相对URL地址。</td></tr><br><tr><td>flush</td><td>    布尔属性，定义在包含资源前是否刷新缓存区。</td></tr><br></table>

<p><strong>实例:</strong></p>
<p><em>date.jsp文件代码：</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;p&gt;
   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;
&lt;/p&gt;
</code></pre><p><em>main.jsp文件代码：</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;123&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h2&gt;include 动作实例&lt;/h2&gt;
&lt;jsp:include page=&quot;date.jsp&quot; flush=&quot;true&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="动作元素-jsp-useBean"><a href="#动作元素-jsp-useBean" class="headerlink" title="动作元素(jsp:useBean)"></a>动作元素(jsp:useBean)</h3><p>jsp:useBean动作最简单的语法为：</p>
<pre><code> &lt;!-- 模板 --&gt;
&lt;jsp:useBean id=&quot;name&quot; class=&quot;package.class&quot; /&gt;
 &lt;!-- 示例 --&gt;
&lt;jsp:useBean id=&quot;stu1&quot; class=&quot;com.itheima.entity.Student&quot;&gt;&lt;/jsp:useBean&gt;
</code></pre><p><strong>注：</strong></p>
<ul>
<li>class中填写的是Bean类的完整路径</li>
<li>id 为定义的的Bean变量名，如 Bean b = new Bean()中的b;</li>
</ul>
<h3 id="动作元素-jsp-setProperty"><a href="#动作元素-jsp-setProperty" class="headerlink" title="动作元素(jsp:setProperty)"></a>动作元素(jsp:setProperty)</h3><blockquote>
<p>jsp:setProperty用来设置已经实例化的Bean对象的属性.</p>
</blockquote>
<pre><code>&lt;jsp:setProperty property=&quot;name&quot; name=&quot;stu1&quot; value=&quot;jerry&quot;/&gt;
</code></pre><p>jsp:setProperty动作有下面四个属性,如下表：</p>
<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    name属性是必需的。它表示要设置属性的是哪个Bean。</td></tr><br><tr><td>property</td><td>    property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是”*”，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><br><tr><td>value</td><td>    value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如”true”）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如”42”）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr><br><tr><td>param</td><td>    param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr><br></table>

<h3 id="动作元素-jsp-getProperty"><a href="#动作元素-jsp-getProperty" class="headerlink" title="动作元素(jsp:getProperty)"></a>动作元素(jsp:getProperty)</h3><blockquote>
<p>jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。</p>
</blockquote>
<p>语法格式如下：</p>
<pre><code>&lt;jsp:getProperty property=&quot;name&quot; name=&quot;stu1&quot;/&gt;
</code></pre><p>下表是与getProperty相关联的属性：</p>
<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>name</td><td>    要检索的Bean属性名称。Bean必须已定义。</td></tr><br><tr><td>property</td><td>    表示要提取Bean属性的值</td></tr><br></table>

<p><strong>实例：</strong></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;useBean&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h2&gt;Jsp 使用 JavaBean 实例&lt;/h2&gt;
&lt;jsp:useBean id=&quot;test&quot; class=&quot;com.runoob.main.TestBean&quot; /&gt;

&lt;jsp:setProperty name=&quot;test&quot; 
property=&quot;message&quot; 
value=&quot;教程...&quot; /&gt;

&lt;p&gt;输出信息....&lt;/p&gt;

&lt;jsp:getProperty name=&quot;test&quot; property=&quot;message&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="动作元素-jsp-forward"><a href="#动作元素-jsp-forward" class="headerlink" title="动作元素(jsp:forward)"></a>动作元素(jsp:forward)</h3><blockquote>
<p>jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。</p>
</blockquote>
<p>语法格式如下所示：</p>
<pre><code>&lt;jsp:forward page=&quot;相对 URL 地址&quot; /&gt;
</code></pre><p>以下是forward相关联的属性：</p>
<table><br><tr><td>属性</td><td>    描述</td></tr><br><tr><td>page</td><td>    page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></table>

<p><strong>实例</strong><br>date.jsp 文件代码如下：</p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;p&gt;
   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;
&lt;/p&gt;
</code></pre><p>main.jsp文件代码：</p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h2&gt;forward 动作实例&lt;/h2&gt;
&lt;jsp:forward page=&quot;date.jsp&quot; /&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="JSP-隐式对象-9"><a href="#JSP-隐式对象-9" class="headerlink" title="JSP 隐式对象(9)"></a>JSP 隐式对象(9)</h2><blockquote>
<p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p>
</blockquote>
<p>JSP所支持的九大隐式对象：</p>
<table><br><tr><td>对象</td><td>    描述</td></tr><br><tr><td>request</td><td>    HttpServletRequest类的实例,它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</td></tr><br><tr><td>response</td><td>    HttpServletResponse类的实例，并提供了几个用于设置送回<br>浏览器的响应的方法（如cookies,头信息等）。</td></tr><br><tr><td>out</td><td>    PrintWriter类的实例，用于把结果输出至网页上</td></tr><br><tr><td>session</td><td>    HttpSession类的实例,Session可以存贮用户的状态信息。</td></tr><br><tr><td>application</td><td>    ServletContext类的实例，与应用上下文有关,有助于查找有关servlet引擎和servlet环境的信息。</td></tr><br><tr><td>config</td><td>    ServletConfig类的实例,该对象用于存取servlet实例的初始化参数。</td></tr><br><tr><td>pageContext</td><td>    PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><br><tr><td>page</td><td>    类似于Java类中的this关键字，表示从该页面产生的一个servlet实例。</td></tr><br><tr><td>Exception</td><td>    Exception类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr><br></table>

<p><strong>pageContext(重要):</strong><br>1、本身也是一个域对象：它可以操作其它三个域对象（<code>request</code> <code>session</code> <code>application</code>）的数据.</p>
<h1 id="四大域对象"><a href="#四大域对象" class="headerlink" title="四大域对象"></a>四大域对象</h1><p>PageContext : pageConext 存放的数据在当前页面有效。开发时使用较少。</p>
<p>ServletRequest: request  存放的数据在一次请求（转发）内有效。使用非常多。</p>
<p>HttpSession: session 存放的数据在一次会话中有效。使用的比较多。如：存放用户的登录信息，购物车功能。</p>
<p>ServletContext: application 存放的数据在整个应用范围内都有效。因为范围太大，应尽量少用。</p>
<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><h2 id="EL概述和基本语法"><a href="#EL概述和基本语法" class="headerlink" title="EL概述和基本语法"></a>EL概述和基本语法</h2><p> EL表达式：expression language 表达式语言</p>
<p> 要简化jsp中java代码开发。</p>
<p> 它不是一种开发语言，是jsp中获取数据的一种规范</p>
<p> 基本语法如下：</p>
<p>  <code>${表达式}</code></p>
<h2 id="EL中的基础操作符"><a href="#EL中的基础操作符" class="headerlink" title="EL中的基础操作符"></a>EL中的基础操作符</h2><table><br><tr><td>操作符</td><td>    描述</td></tr><br><tr><td>.</td><td>    访问一个Bean属性或者一个映射条目</td></tr><br><tr><td>[]</td><td>    访问一个数组或者链表的元素</td></tr><br><tr><td>( )</td><td>    组织一个子表达式以改变优先级</td></tr><br><tr><td>+</td><td>    加</td></tr><br><tr><td>-</td><td>    减或负</td></tr><br><tr><td>*</td><td>    乘</td></tr><br><tr><td>/ or div</td><td>    除</td></tr><br><tr><td>% or mod</td><td>    取模</td></tr><br><tr><td>A?B:C</td><td>    执行某种条件判断</td></tr><br><tr><td>== or eq</td><td>    测试是否相等</td></tr><br><tr><td>!= or ne</td><td>    测试是否不等</td></tr><br><tr><td>&lt; or lt</td><td>    测试是否小于</td></tr><br><tr><td>&gt; or gt</td><td>    测试是否大于</td></tr><br><tr><td>&lt;= or le</td><td>    测试是否小于等于</td></tr><br><tr><td>&gt;= or ge</td><td>    测试是否大于等于</td></tr><br><tr><td>&amp;&amp; or and</td><td>    测试逻辑与</td></tr><br><tr><td>|| or or</td><td>    测试逻辑或</td></tr><br><tr><td>! or not</td><td>    测试取反</td></tr><br><tr><td>empty</td><td>    测试是否空值</td></tr><br></table>

<p><em>补：</em></p>
<p>EL表达式中的empty运算符用于判断某个对象是否为null或””，结果为布尔类型，语法格式如下：</p>
<pre><code>${empty var}
</code></pre><p>下列情况empty返回值为true。</p>
<ul>
<li>var变量不存在，即没有定义，例如表达式${empty name},如果不存在 name 变量，就返回 true。</li>
<li>var变量的值为null，例如表达式 ${empty customer.name},如果customer.name的值为null，就返回true.</li>
<li>var变量引用集合（Set、Map、List）类型对象，并且在集合对象中不包含任何元素。</li>
</ul>
<h2 id="防止HTML注入"><a href="#防止HTML注入" class="headerlink" title="防止HTML注入"></a>防止HTML注入</h2><p><em>displayMessage.jsp</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;form action=&quot;servlet/ResultServlet&quot; method=&quot;post&quot;&gt;
用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;
留言：
&lt;textarea rows=&quot;6&quot; cols=&quot;50&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;
&lt;br&gt;
&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><em>ResultServlet.java</em></p>
<pre><code>package com.tq.servlet;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ResultServlet extends HttpServlet {

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request,response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding(&quot;UTF-8&quot;);
        String name = request.getParameter(&quot;username&quot;);
        String message = request.getParameter(&quot;message&quot;);
        request.setAttribute(&quot;name&quot;, name);
        request.setAttribute(&quot;message&quot;, message);
        request.getRequestDispatcher(&quot;/result.jsp&quot;).forward(request, response);
        }

}
</code></pre><p><em>HTMLFilter.java</em></p>
<pre><code>package com.tq.util;

public class HTMLFilter {

    public static String filter(String message){
        if (message==null) {
            return (null);
        }
        char content[] = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length);
        for (int i = 0; i &lt; content.length; i++) {
            switch (content[i]) {
            case &apos;&lt;&apos;:
                result.append(&quot;&amp;lt;&quot;);
                break;
            case &apos;&gt;&apos;:
                result.append(&quot;&amp;gt;&quot;);
                break;
            case &apos;&amp;&apos;:
                result.append(&quot;&amp;amp;&quot;);
                break;
            case &apos;&quot;&apos;:
                result.append(&quot;&amp;quot;&quot;);
                break;
            default:
                result.append(content[i]);
                break;
            }
        }
        return (result.toString());
    }
}
</code></pre><p><em>mytaglib.tld</em></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;  
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  
xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;
version=&quot;2.0&quot;&gt;
 &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
 &lt;short-name&gt;function&lt;/short-name&gt;
 &lt;uri&gt;http://www.mutouspace.cn&lt;/uri&gt;
 &lt;function&gt;
&lt;name&gt;filter&lt;/name&gt;
&lt;function-class&gt;
   com.tq.util.HTMLFilter
&lt;/function-class&gt;
&lt;function-signature&gt;
   java.lang.String filter(java.lang.String)
&lt;/function-signature&gt;
 &lt;/function&gt;
&lt;/taglib&gt;
</code></pre><p><em>result.jsp</em></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ taglib prefix = &quot;terry&quot; uri=&quot;http://www.mutouspace.cn&quot;  %&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

 用户名:${name}&lt;br&gt; 
 留言：${terry:filter(message)}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h1 id="JSP-标准标签库（JSTL）"><a href="#JSP-标准标签库（JSTL）" class="headerlink" title="JSP 标准标签库（JSTL）"></a>JSP 标准标签库（JSTL）</h1><p>待补充。。。。</p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之Servlet]]></title>
      <url>http://mutouspace.cn/2017/03/25/JAVA%E4%B9%8BServlet/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h1><blockquote>
<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
</blockquote>
<p><strong>Servlet 任务</strong></p>
<ul>
<li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li>
<li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li>
<li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li>
<li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li>
<li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li>
</ul>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h1><pre><code>public class ServletDemo1 implements Servlet{

//Servlet生命周期方法
//实例化
//在Servlet第一次访问时调用
public ServletDemo1(){
    System.out.println(&quot;*************ServletDemo1执行了***************&quot;);
}
//Servlet生命周期方法
//初始化
//在Servlet第一次访问时调用,在后续每次用户请求时不再调用
@Override
public void init(ServletConfig arg0) throws ServletException {
    System.out.println(&quot;*************init执行了***************&quot;);

}
//Servlet生命周期方法
//服务
//每次访问时都调用
@Override
public void service(ServletRequest arg0, ServletResponse arg1)
        throws ServletException, IOException {
    System.out.println(&quot;*************service执行了***************&quot;);
}
//Servlet生命周期方法
//销毁
@Override
public void destroy() {
    System.out.println(&quot;*************destroy执行了***************&quot;);

}

@Override
public ServletConfig getServletConfig() {
    // TODO Auto-generated method stub
    return null;
}

@Override
public String getServletInfo() {
    // TODO Auto-generated method stub
    return null;
}


}
</code></pre><h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><table><tr><td>代码</td><td>    消息</td><td>    描述</td></tr><br><tr><td>100</td><td>    Continue    </td><td>只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><br><tr><td>101    </td><td>Switching Protocols</td><td>    服务器切换协议。</td></tr><br><tr><td>200</td><td>    OK</td><td>    请求成功。</td></tr><br><tr><td>201    </td><td>Created</td><td>    该请求是完整的，并创建一个新的资源。</td></tr><br><tr><td>202    </td><td>Accepted    </td><td>该请求被接受处理，但是该处理是不完整的。</td></tr><br><tr><td>203    </td><td>Non-authoritative Information    </td><td> </td></tr><br><tr><td>204    </td><td>No Content     </td><td></td></tr><br><tr><td>205    </td><td>Reset Content     </td><td></td></tr><br><tr><td>206    </td><td>Partial Content    </td><td> </td></tr><br><tr><td>300    </td><td>Multiple Choices</td><td>    链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><br><tr><td>301    </td><td>Moved Permanently    </td><td>所请求的页面已经转移到一个新的 URL。</td></tr><br><tr><td>302    </td><td>Found    </td><td>所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>303    </td><td>See Other    </td><td>所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><br><tr><td>304    </td><td>Not Modified    </td><td> </td></tr><br><tr><td>305    </td><td>Use Proxy     </td><td></td></tr><br><tr><td>306    </td><td>Unused    </td><td>在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><br><tr><td>307    </td><td>Temporary Redirect</td><td>    所请求的页面已经临时转移到一个新的 URL。</td></tr><br><tr><td>400    </td><td>Bad Request</td><td>    服务器不理解请求。</td></tr><br><tr><td>401    </td><td>Unauthorized</td><td>    所请求的页面需要用户名和密码。</td></tr><br><tr><td>402    </td><td>Payment Required</td><td>    您还不能使用该代码。</td></tr><br><tr><td>403    </td><td>Forbidden</td><td>    禁止访问所请求的页面。</td></tr><br><tr><td>404    </td><td>Not Found    </td><td>服务器无法找到所请求的页面。.</td></tr><br><tr><td>405    </td><td>Method Not Allowed    </td><td>在请求中指定的方法是不允许的。</td></tr><br><tr><td>406    </td><td>Not Acceptable    </td><td>服务器只生成一个不被客户端接受的响应。</td></tr><br><tr><td>407    </td><td>Proxy Authentication Required    </td><td>在请求送达之前，您必须使用代理服务器的验证。</td></tr><br><tr><td>408    </td><td>Request Timeout    </td><td>请求需要的时间比服务器能够等待的时间长，超时。</td></tr><br><tr><td>409    </td><td>Conflict    </td><td>请求因为冲突无法完成。</td></tr><br><tr><td>410    </td><td>Gone    </td><td>所请求的页面不再可用。</td></tr><br><tr><td>411    </td><td>Length Required    </td><td>“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><br><tr><td>412    </td><td>Precondition Failed    </td><td>请求中给出的先决条件被服务器评估为 false。</td></tr><br><tr><td>413    </td><td>Request Entity Too Large    </td><td>服务器不接受该请求，因为请求实体过大。</td></tr><br><tr><td>414    </td><td>Request-url Too Long    </td><td>服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><br><tr><td>415    </td><td>Unsupported Media Type    </td><td>服务器不接受该请求，因为媒体类型不被支持。</td></tr><br><tr><td>417    </td><td>Expectation Failed     </td><td></td></tr><br><tr><td>500    </td><td>Internal Server Error    </td><td>未完成的请求。服务器遇到了一个意外的情况。</td></tr><br><tr><td>501    </td><td>Not Implemented    </td><td>未完成的请求。服务器不支持所需的功能。</td></tr><br><tr><td>502    </td><td>Bad Gateway    </td><td>未完成的请求。服务器从上游服务器收到无效响应。</td></tr><br><tr><td>503    </td><td>Service Unavailable    </td><td>未完成的请求。服务器暂时超载或死机。</td></tr><br><tr><td>504    </td><td>Gateway Timeout    </td><td>网关超时。</td></tr><br><tr><td>505    </td><td>HTTP Version Not Supported</td><td>    服务器不支持”HTTP协议”版本。</td></tr><br></table>

<h2 id="设置-HTTP-状态代码的方法"><a href="#设置-HTTP-状态代码的方法" class="headerlink" title="设置 HTTP 状态代码的方法"></a>设置 HTTP 状态代码的方法</h2><table><br><tr><td>序号</td><td>    方法 &amp; 描述</td></tr><br><tr><td>1    public void setStatus ( int statusCode )</td><td><br>该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。</td></tr><br><tr><td>2    public void sendRedirect(String url)</td><td><br>该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。</td></tr><br><tr><td>3    public void sendError(int code, String message)</td><td><br>该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr><br></table>

<h2 id="HTTP-状态码实例"><a href="#HTTP-状态码实例" class="headerlink" title="HTTP 状态码实例"></a>HTTP 状态码实例</h2><pre><code>// 扩展 HttpServlet 类
public class showError extends HttpServlet {

// 处理 GET 方法请求的方法
public void doGet(HttpServletRequest request,
                HttpServletResponse response)
        throws ServletException, IOException
 {
  // 设置错误代码和原因
  response.sendError(407, &quot;Need authentication!!!&quot; );
 }
// 处理 POST 方法请求的方法
public void doPost(HttpServletRequest request,
                 HttpServletResponse response)
  throws ServletException, IOException {
 doGet(request, response);
}
}
</code></pre><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p><em>Cookie实例：</em></p>
<pre><code>public class Cookie01 extends HttpServlet {

public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    doPost(request, response);
}
public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

    getCookie(request, response);
}
//通过Servlet获取Cookie
private void getCookie(HttpServletRequest request,
        HttpServletResponse response) throws UnsupportedEncodingException {
    Cookie cookie = null;
    Cookie[] cookies = null;
    // 获取与该域相关的 Cookie 的数组
    cookies = request.getCookies();

     // 设置响应内容类型
     response.setContentType(&quot;text/html;charset=UTF-8&quot;);

      if( cookies != null ){
        for (int i = 0; i &lt; cookies.length; i++){
           cookie = cookies[i];
           if((cookie.getName( )).compareTo(&quot;name&quot;) == 0 ){
                cookie.setMaxAge(0);
                response.addCookie(cookie);
                System.out.println(&quot;已删除的 cookie：&quot; + 
                        cookie.getName( ));
           }
           System.out.println(&quot;名称：&quot; + cookie.getName( ) + &quot;,&quot;);
           System.out.println(&quot;值：&quot; +  URLDecoder.decode(cookie.getValue(), &quot;utf-8&quot;));
        }
     }
}
//设置Cookie
private void setCookie(HttpServletRequest request,
        HttpServletResponse response) throws UnsupportedEncodingException,
        IOException {
    // 为名字和姓氏创建 Cookie      
        Cookie name = new Cookie(&quot;name&quot;,
                URLEncoder.encode(request.getParameter(&quot;name&quot;), &quot;UTF-8&quot;)); // 中文转码
        Cookie url = new Cookie(&quot;url&quot;,
                      request.getParameter(&quot;url&quot;));

        // 为两个 Cookie 设置过期日期为 24 小时后
        name.setMaxAge(60*60*24); 
        url.setMaxAge(60*60*24); 

        // 在响应头中添加两个 Cookie
        response.addCookie(name);
        response.addCookie(url);

        // 设置响应内容类型
        response.setContentType(&quot;text/html;charset=UTF-8&quot;);

        System.out.println(request.getParameter(&quot;name&quot;));
        System.out.println(request.getParameter(&quot;url&quot;) );
}

}
</code></pre><p>html文件：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action=servlet/cookie01 method=&quot;GET&quot;&gt;
站点名 ：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
&lt;br /&gt;
站点 URL：&lt;input type=&quot;text&quot; name=&quot;url&quot; /&gt;&lt;br&gt;
&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h1 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h1><p>java文件：</p>
<pre><code>import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 * 文件下载
 * @author tianq
 *
 */
public class ServletDemo5 extends HttpServlet {

public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

    doPost(request,response);
}

public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
   //通过路径得到一个输入流
    String path = this.getServletContext().getRealPath(&quot;WEB-INF/classes/美景.jpg&quot;);
    FileInputStream fis = new FileInputStream(path);
    //创建字节输出流
    ServletOutputStream sos = response.getOutputStream();
    //得到要下载的文件名
    String fileName = path.substring(path.lastIndexOf(&quot;\\&quot;)+1);
    //设置文件名编码
    fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;);
    //告知客户端下载
    response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot;+fileName);
    response.setHeader(&quot;content-type&quot;, &quot;image/jpeg&quot;);
    //执行输出操作
    int len = 1;
    byte[] b = new byte[1024];
    while ((len=fis.read(b))!=-1) {
        sos.write(b, 0, len);

    }

}

}
</code></pre></the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用工具的环境变量配置]]></title>
      <url>http://mutouspace.cn/2017/03/24/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<blockquote>
<p>本博文主要介绍一些工具安装后对环境变量的配置，本来不打算写这种博文的，这种博文在网上一搜一大把，但网络资源鱼龙混杂，有的教程可能并不适合自己的环境，所以就写了这样一篇环境配置的博文，既然写了，那以后再遇到环境配置的问题还会继续添加，如有错误，欢迎大家指出，谢谢！</p>
</blockquote>
<p><em><p style="color:red;">转载请注明：转载于Terry Tian的博客（<a href="www.mutouspace.cn">www.mutouspace.cn</a>）!</p></em></p>
<p>date: 2017-03-24 17:34:56</p>
<ul>
<li>JDK的环境变量配置</li>
<li>Tomcat的环境变量配置</li>
</ul>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<p><strong><p style="color:blue;">大家既然想找的是如何配置环境变量，那读者一定知道软件是如何下载、如何安装的，所以本文中就不再过多的介绍下载和安装过程了，重点记录一下环境变量的配置。</p></strong><br><strong>作者环境：Windows 10 X64</strong></p>
<h1 id="JDK的环境变量配置"><a href="#JDK的环境变量配置" class="headerlink" title="JDK的环境变量配置"></a>JDK的环境变量配置</h1><ul>
<li>新建JAVA_HOME</li>
<li>新建CLASSPATH</li>
<li>编辑PATH</li>
</ul>
<p>第一步：“我的电脑” -&gt; 右击 -&gt; “属性” -&gt; “高级系统设置” -&gt; “环境变量”;</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/01.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/02.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>第二步：新建JAVA_HOME  里边填入jdk的绝对地址： <strong>E:\JAVA\jdk</strong>   </p><p style="color:red;">注意：最后不要加分号！！！！</p><p></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/03.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/04.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>第三步：新建CLASSPATH  内容为： <strong>.;%JAVA_HOME%\lib;</strong>  </p><p style="color:red;">注意：不要忘记前面的“ .; ”！！！！</p><p></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/05.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>第四步：编辑PATH       新加入： <strong>%JAVA_HOME%\bin;</strong>   </p><p style="color:red;">注意：每个路径之间都有分号！！！！</p><p></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/06.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>第五步：在控制台页面分别输入 “java” “javac” “java -version” 做测试</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/08.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/09.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/10.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>补充：</p>
<p><strong>‘JAVAC’ 不是内部或外部命令解决方法</strong></p>
<p><a href="http://jingyan.baidu.com/article/1e5468f924210a484961b7f0.html" target="_blank" rel="external">链接：http://jingyan.baidu.com/article/1e5468f924210a484961b7f0.html</a></p>
<h1 id="Tomcat的环境变量配置"><a href="#Tomcat的环境变量配置" class="headerlink" title="Tomcat的环境变量配置"></a>Tomcat的环境变量配置</h1><ol>
<li>新建变量名：CATALINA_BASE，变量值：E:\tomcat</li>
<li>新建变量名：CATALINA_HOME，变量值：E:\tomcat</li>
<li>打开PATH，添加变量值：%CATALINA_HOME%\lib;%CATALINA_HOME%\bin;</li>
</ol>
<p>有了JDK环境变量配置的经验，我相信大家对配置都已经轻车熟路了，这里就不配图了。</p>
<p>最后一步：</p>
<p> 在CMD命令下输入命令：<code>startup</code>，出现如下对话框，表明服务启动成功。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/11.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境变量配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的专业搜索工具（分类)]]></title>
      <url>http://mutouspace.cn/2017/03/24/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%93%E4%B8%9A%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%EF%BC%88%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">


<blockquote>
<p>本文基于大家日常上网的需要，分类整理了不同检索需求的工具，<br>主要包括：电子书、图片、网盘、音乐、工作机会以及商品价格检索。</p>
</blockquote>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="一、电子书检索"><a href="#一、电子书检索" class="headerlink" title="一、电子书检索"></a>一、电子书检索</h2><p>1、<a href="https://www.jiumodiary.com/" title="鸠摩搜书" target="_blank" rel="external">鸠摩搜书</a></p>
<p><img src="http://i.imgur.com/jJG97pv.png" alt="鸠摩搜书"><br>鸠摩搜书是一款非常棒的电子书搜索引擎。有了它，你可以轻易发现其他站点上的电子书资源。这样可以省去很多时间。</p>
<p>2、<a href="http://bookzz.org/" title="bookzz" target="_blank" rel="external">BOOKZZ</a>/<a href="http://sur.ly/o/gen.lib.rus.ec/AA000014" title="Library Genesis" target="_blank" rel="external">Library Genesis</a></p>
<p>值得一提的是，这两个网站都可以不用翻墙，所以墙里的同学，也可以享受到来自世界的福利。</p>
<p>这两款可以说是英文教材资源站的神器了。</p>
<p>基本上，你想要的，它俩都能给你。</p>
<p>其他的电子书资源站点收录如下（含国内和国外）：</p>
<p>1、<a href="http://www.oxingtui.com/other/resource.htm" title="电子书网站汇总" target="_blank" rel="external">电子书网站汇总</a></p>
<p>注：这个是电子书资源汇总终极站，资源丰富的丧心病狂！</p>
<h2 id="二、图片检索"><a href="#二、图片检索" class="headerlink" title="二、图片检索"></a>二、图片检索</h2><p>1、<a href="http://www.duososo.com/" title="多搜搜：www.duososo.com" target="_blank" rel="external">多搜搜：www.duososo.com</a></p>
<p>2、<a href="http://gensun.org/" title="原寸画像检索：gensun.org" target="_blank" rel="external">原寸画像检索：gensun.org</a></p>
<p>3、<a href="http://www.incogna.com/#random" title="incogna：www.incogna.com" target="_blank" rel="external">incogna：www.incogna.com</a></p>
<p>4、<a href="http://image.baidu.com/?fr=shitu" title="百度识图" target="_blank" rel="external">百度识图</a>  支持一下百度同学，毕竟国产</p>
<h2 id="三、网盘资源检索："><a href="#三、网盘资源检索：" class="headerlink" title="三、网盘资源检索："></a>三、网盘资源检索：</h2><p>1、<a href="http://www.panc.cc/" title="胖次搜索" target="_blank" rel="external">胖次搜索</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/SgbBgny.png" alt="胖次搜索" title="">
                </div>
                <div class="image-caption">胖次搜索</div>
            </figure>
<p>胖次搜索是一个很有意思的网盘资源搜索引擎，可以解析被吞的百度云分享链接。</p>
<p>2、<a href="http://so.baiduyun.me/" title="百度网盘搜索" target="_blank" rel="external">百度网盘搜索</a></p>
<p>百度网盘是比百度本身更靠谱的搜索工具。</p>
<p>其他的网盘搜索引擎收录如下：</p>
<p>1、<a href="http://www.pansou.com" title="盘搜：www.pansou.com" target="_blank" rel="external">盘搜：www.pansou.com</a></p>
<p>2、<a href="http://www.xilinjie.com" title="西林街：www.xilinjie.com" target="_blank" rel="external">西林街：www.xilinjie.com</a></p>
<p>3、<a href="http://panyisou.com" title="盘易搜：panyisou.com" target="_blank" rel="external">盘易搜：panyisou.com</a></p>
<p>4、<a href="http://www.baidu10.net" title="麦库搜索：www.baidu10.net" target="_blank" rel="external">麦库搜索：www.baidu10.net</a></p>
<p>5、<a href="http://www.daysou.com" title="云搜：www.daysou.com" target="_blank" rel="external">云搜：www.daysou.com</a></p>
<p>6、<a href="http://www.zhaofile.com" title="找文件：www.zhaofile.com" target="_blank" rel="external">找文件：www.zhaofile.com</a></p>
<p>7、<a href="http://www.360swp.com" title="360搜网盘www.360swp.com" target="_blank" rel="external">360搜网盘www.360swp.com</a></p>
<p>8、<a href="http://search.likebeta.com" title="尝鲜搜索：search.likebeta.com" target="_blank" rel="external">尝鲜搜索：search.likebeta.com</a></p>
<p>9、<a href="http://so.xpan.me/index.html" title="吸盘：so.xpan.me/index.html" target="_blank" rel="external">吸盘：so.xpan.me/index.html</a></p>
<p>10、<a href="http://www.quzhuanpan.com" title="去转盘：www.quzhuanpan.com" target="_blank" rel="external">去转盘：www.quzhuanpan.com</a></p>
<h2 id="四、音乐检索"><a href="#四、音乐检索" class="headerlink" title="四、音乐检索"></a>四、音乐检索</h2><p>作为网易云的忠实拥簇，一般来说，刷刷评论区，随机听一听FM，再收一收网易的推荐，基本上我的音乐边界就可以触到了。</p>
<p>然而，对于那些视音乐为生命的乐迷来说，世界上的好音乐总是不嫌多的。</p>
<p>有什么办法可以找到更丰富的音乐资源，享受更极致的音乐体验呢？</p>
<p>下面的音乐检索工具，相信你一定不会错过。</p>
<p>1、<a href="http://listen1.github.io/listen1/" title="Listen 1 音乐播放器" target="_blank" rel="external">Listen 1 音乐播放器</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/jLoy1vw.png" alt="Listen" title="">
                </div>
                <div class="image-caption">Listen</div>
            </figure>
<p>Listen 1是一款搜索与播放来自网易云音乐，虾米，QQ音乐三个主流音乐网站的曲库软件。</p>
<p>这款软件的作用不言而喻，可以帮你减少在不同音乐站点搜索资源的时间花费。</p>
<p>软件本身支持windows、linux、MAC以及chrome和firefox的插件。</p>
<p>对多平台的支持，大大提高了普适性。</p>
<p>其他的音乐搜索工具收录如下：</p>
<p>1、<a href="http://www.last.fm/zh/" title="Last.fm" target="_blank" rel="external">Last.fm</a> - 通过网上最大的音乐库收听免费音乐、观赏精彩视频</p>
<p>2、<a href="http://www.midomi.com" title="www.midomi.com" target="_blank" rel="external">www.midomi.com</a></p>
<p>3、<a href="http://www.bored.com" title="www.bored.com" target="_blank" rel="external">www.bored.com</a></p>
<p>4、<a href="http://www.sogua.com" title="www.sogua.com" target="_blank" rel="external">www.sogua.com</a></p>
<h2 id="五、职位搜索引擎"><a href="#五、职位搜索引擎" class="headerlink" title="五、职位搜索引擎"></a>五、职位搜索引擎</h2><p>按理说，职位搜索引擎是一个鸡肋般的存在。</p>
<p>因为国内的一些主流的招聘网站，基本上能够满足我们的需求。</p>
<p>智联、前程自不必说，拉勾、脉脉、boss直聘、猎聘、领英等，基本上就可以搞定我们的95%网络求职的需求。</p>
<p>一些垂着的，比如topys、站酷、秒聘，甚至水木社区招聘、itpub、豆瓣招聘小组等，都可以获得丰富的招聘机会。</p>
<p>因此机会从来不缺，但是我们缺一个获取机会的最快捷径。</p>
<p>这时候，一款合适的搜索引擎工具，就显得尤为重要了。</p>
<p>下面来分享几款较好的搜索引擎工具。</p>
<p>1、百度招聘</p>
<p>通过职位关键词，你可以找到大量的国内主流招聘网站发布的求职机会。</p>
<p>比如，前程、智联、拉勾、boss直聘等。</p>
<p>这样做的好处是明显的，不用疲于奔命，可以有效降低时间成本。</p>
<p>2、伯益 ：www.boryi.com</p>
<h2 id="六、价格检索"><a href="#六、价格检索" class="headerlink" title="六、价格检索"></a>六、价格检索</h2><p>现在市场上的产品信息实在是太多太杂。</p>
<p>因为缺乏一个共同的标准，所以我们在购物的时候，总是满怀感叹：为什么同一件商品会有不同的价格。</p>
<p>这里面除了促销、进货成本的因素，平台本身也是一个很大的影响因子。</p>
<p>为了消除价格信息不对称引起的无效浪费，</p>
<p>我们需要一些有用的比价工具。</p>
<p>下面就是一些有效的比价网站。</p>
<p>1、<a href="http://www.b1bj.com/" title="比一比价" target="_blank" rel="external">比一比价</a></p>
<p>比一比价网是一款非常不错的购物价格搜索引擎。</p>
<p>主要检索各个购物网站同类商品的价格。比如京东、天猫、1号店、亚马逊、当当等。</p>
<p>网站主要支持关键词搜索，可以横向对比商品在各渠道的价格分布。</p>
<p>图书比价功能也很不错，堪比枣书。</p>
<p>2、<a href="http://www.xitie.com/" title="历史价格检索" target="_blank" rel="external">历史价格检索</a></p>
<p>西贴真是一个神奇的网站。</p>
<p>作为一个商品历史价格查询器，西贴可以监控到某个商品的历史价格分布。</p>
<p>细心观察网站提供的价格变化曲线，我们可以发现一些不为察觉的价格猫腻。</p>
<p>若是放在双十一前后，大家是不是会忍住剁手的欲望？</p>
<p>其他的价格检索收录如下：</p>
<p>1、<a href="http://www.tangou.cn" title="Tangou：www.tangou.cn" target="_blank" rel="external">Tangou：www.tangou.cn</a></p>
<p>2、<a href="http://go.xungou.com" title="寻购网：go.xungou.com" target="_blank" rel="external">寻购网：go.xungou.com</a></p>
<p>3、<a href="http://www.huihui.cn" title="惠惠网 ：www.huihui.cn" target="_blank" rel="external">惠惠网 ：www.huihui.cn</a></p>
<h1 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h1><hr>
<p> <strong> 适合自己的才是最好的！</strong></p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之JDBC]]></title>
      <url>http://mutouspace.cn/2017/03/22/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8BJDBC/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><blockquote>
<p>JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。</p>
<p>JDBC与数据库驱动的关系：接口与实现的关系。</p>
</blockquote>
<p><strong>JDBC规范（掌握四个核心对象）：</strong></p>
<ul>
<li>DriverManager:用于注册驱动</li>
<li>Connection: 表示与数据库创建的连接</li>
<li>Statement: 操作数据库sql语句的对象</li>
<li>ResultSet: 结果集或一张虚拟表</li>
</ul>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="开发一个JDBC程序（重要）"><a href="#开发一个JDBC程序（重要）" class="headerlink" title="开发一个JDBC程序（重要）"></a>开发一个JDBC程序（重要）</h1><ol>
<li><p>创建数据库表，并向表中添加测试数据 </p>
<pre><code>&lt;--创建数据库--&gt;
create database day06;
use day06;
&lt;--创建数据库表--&gt;
create table users(
id int primary key auto_increment,
name varchar(40),
password varchar(40),
email varchar(60),
birthday date
 )character set utf8 collate utf8_general_ci;
&lt;--添加数据--&gt;
insert into users(name,password,email,birthday) values(&apos;zs&apos;,&apos;123456&apos;,&apos;zs@sina.com&apos;,&apos;1980-12-04&apos;);
insert into users(name,password,email,birthday) values(&apos;lisi&apos;,&apos;123456&apos;,&apos;lisi@sina.com&apos;,&apos;1981-12-04&apos;);
insert into users(name,password,email,birthday) values(&apos;wangwu&apos;,&apos;123456&apos;,&apos;wangwu@sina.com&apos;,&apos;1979-12-04&apos;);
</code></pre></li>
<li><p>创建java project项目，添加数据库驱动（*.jar）</p>
</li>
<li><p>实现JDBC操作</p>
<pre><code>- 注册驱动
- 创建连接
- 得到执行sql语句的Statement对象
- 执行sql语句，并返回结果
- 处理结果
- 关闭资源
</code></pre><p><strong>example:</strong></p>
<pre><code>   public class demo01 {

   public static void main(String[] args) throws Exception{
 // TODO Auto-generated method stub
 //1、注册驱动
 //DriverManager.registerDriver(new com.mysql.jdbc.Driver());
 //1.加载驱动
  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
  //2、创建连接
 Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;);
         //3、得到执行sql语句的Statement对象
 Statement stmt = conn.createStatement();
         //4、执行sql语句，并返回结果
 String sql = &quot;select id,name,password,email,birthday from users&quot;;
 ResultSet rs = stmt.executeQuery(sql);
         //5、处理结果
 while (rs.next()) {
             System.out.println(rs.getObject(1));
             System.out.println(rs.getObject(2));
             System.out.println(rs.getObject(3));
             System.out.println(rs.getObject(4));
             System.out.println(rs.getObject(5));
         }
         //6关闭资源
 rs.close();
 stmt.close();
 conn.close();
}

}
</code></pre></li>
</ol>
<h1 id="JDBC常用的类和接口详解"><a href="#JDBC常用的类和接口详解" class="headerlink" title="JDBC常用的类和接口详解"></a>JDBC常用的类和接口详解</h1><h2 id="java-sql-Drivermanager类-创建连接"><a href="#java-sql-Drivermanager类-创建连接" class="headerlink" title="java.sql.Drivermanager类 : 创建连接"></a>java.sql.Drivermanager类 : 创建连接</h2><ol>
<li><p>注册驱动</p>
<p>DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用<br>原因有2个：</p>
<ul>
<li>导致驱动被注册2次。</li>
<li>强烈依赖数据库的驱动jar</li>
</ul>
</li>
</ol>
<p>   解决办法：</p>
<pre><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
</code></pre><ol>
<li><p>与数据库建立连接</p>
<pre><code>static Connection getConnection(String url, String user, String password) 

getConnection(&quot;jdbc:mysql://localhost:3306/day06&quot;, &quot;root&quot;, &quot;root&quot;);

URL:SUN公司与数据库厂商之间的一种协议。
jdbc:mysql://localhost:3306/day06
协议 子协议          IP:端口号 数据库

mysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接）
oracle: jdbc:oracle:thin:@localhost:1521:sid
</code></pre></li>
</ol>
<pre><code>Properties info = new Properties();//要参考数据库文档
info.setProperty(&quot;user&quot;, &quot;root&quot;);
info.setProperty(&quot;password&quot;,&quot;root&quot;);

getConnection(String url, Properties info) 

getConnection(String url) 
DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/day14?user=root&amp;password=root&quot;);
</code></pre><h1 id="实现一个用户登录的功能"><a href="#实现一个用户登录的功能" class="headerlink" title="实现一个用户登录的功能"></a>实现一个用户登录的功能</h1><p>Demo:<a href="https://github.com/MuTouTQ/login" target="_blank" rel="external">https://github.com/MuTouTQ/login</a></p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JDBC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之JUnit]]></title>
      <url>http://mutouspace.cn/2017/03/22/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8BJUnit/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="JUnit是什么？"><a href="#JUnit是什么？" class="headerlink" title="JUnit是什么？"></a>JUnit是什么？</h1><blockquote>
<p>JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。</p>
<p>JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。</p>
</blockquote>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="JUnit提供"><a href="#JUnit提供" class="headerlink" title="JUnit提供"></a>JUnit提供</h2><ol>
<li>断言测试预期结果。</li>
<li>测试功能共享通用的测试数据。</li>
<li>测试套件轻松地组织和运行测试。</li>
<li>图形和文本测试运行。</li>
</ol>
<h2 id="JUnit用于测试"><a href="#JUnit用于测试" class="headerlink" title="JUnit用于测试"></a>JUnit用于测试</h2><ol>
<li>整个对象</li>
<li>对象的一部分 - 交互的方法或一些方法</li>
<li>几个对象之间的互动(交互)</li>
</ol>
<h2 id="JUnit的特点"><a href="#JUnit的特点" class="headerlink" title="JUnit的特点"></a>JUnit的特点</h2><ol>
<li>JUnit是用于编写和运行测试的开源框架。</li>
<li>提供了注释，以确定测试方法。</li>
<li>提供断言测试预期结果。</li>
<li>提供了测试运行的运行测试。</li>
<li>JUnit测试让您可以更快地编写代码，提高质量</li>
<li>JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。</li>
<li>JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。</li>
<li>JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。</li>
<li>Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。</li>
</ol>
<h1 id="JUnit简单示例"><a href="#JUnit简单示例" class="headerlink" title="JUnit简单示例"></a>JUnit简单示例</h1><blockquote>
<p>使用工具：eclipse</p>
</blockquote>
<p>测试类：</p>
<p><em>Calculate.java</em></p>
<pre><code>public class Calculate {

    public int sum(int var1, int var2) {
        System.out.println(&quot;相加的值是: &quot; + var1 + &quot; + &quot; + var2);
        return var1 + var2;
    }

}
</code></pre><p><em>CalculateTest.java</em></p>
<pre><code>public class CalculateTest {

    Calculate calculation = new Calculate();
    int sum = calculation.sum(2, 5);
    int testSum = 7;

    @Test
    public void testSum() {
        System.out.println(&quot;@Test sum(): &quot; + sum + &quot; = &quot; + testSum);
        assertEquals(sum, testSum);
    }

}
</code></pre><blockquote>
<p>@Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。<br>因此，testSum()方法将用于测试公开方法 sum() 。 </p>
<p>方法 assertEquals(sum, testsum)。<br>assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。</p>
</blockquote>
<p><em>如果要运行测试类，右键点击测试类，并选择 Run As -&gt; Junit Test</em>。</p>
<h1 id="JUnit注解"><a href="#JUnit注解" class="headerlink" title="JUnit注解"></a>JUnit注解</h1><p>在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括：</p>
<table><br><tr><td>注解</td>    <td>描述</td></tr><br><tr><td>@Test<br><br>public void method()</td>    <td>测试注释指示该公共无效方法它所附着可以作为一个测试用例。</td></tr><br><tr><td>@Before<br><br>public void method()</td>    <td>Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。</td></tr><br><tr><td>@BeforeClass<br><br>public static void method()</td><td>BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。</td></tr><br><tr><td>@After<br><br>public void method()</td><td>After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)</td></tr><br><tr><td>@AfterClass<br><br>public static void method()</td><td>当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。</td></tr><br><tr><td>@Ignore<br><br>public static void method()</td><td>当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。</td></tr><br></table>

<p>让我们看看一个测试类，在上面提到的一些注解的一个例子。</p>
<p><em>AnnotationsTest.java</em></p>
<pre><code>package com.yiibai.junit;

import static org.junit.Assert.*;
import java.util.*;
import org.junit.*;

public class AnnotationsTest {

private ArrayList testList;

@BeforeClass
public static void onceExecutedBeforeAll() {
System.out.println(&quot;@BeforeClass: onceExecutedBeforeAll&quot;);
}

@Before
public void executedBeforeEach() {
testList = new ArrayList();
System.out.println(&quot;@Before: executedBeforeEach&quot;);
}

@AfterClass
public static void onceExecutedAfterAll() {
System.out.println(&quot;@AfterClass: onceExecutedAfterAll&quot;);
}

@After
public void executedAfterEach() {
testList.clear();
System.out.println(&quot;@After: executedAfterEach&quot;);
}

@Test
public void EmptyCollection() {
assertTrue(testList.isEmpty());
System.out.println(&quot;@Test: EmptyArrayList&quot;);
}

@Test
public void OneItemCollection() {
testList.add(&quot;oneItem&quot;);
assertEquals(1, testList.size());
System.out.println(&quot;@Test: OneItemArrayList&quot;);
}

@Ignore
public void executionIgnored() {
System.out.println(&quot;@Ignore: This execution is ignored&quot;);
}
}
</code></pre><p>如果我们运行上面的测试，控制台输出将是以下几点：</p>
<pre><code>@BeforeClass: onceExecutedBeforeAll
@Before: executedBeforeEach
@Test: EmptyArrayList
@After: executedAfterEach
@Before: executedBeforeEach
@Test: OneItemArrayList
@After: executedAfterEach
@AfterClass: onceExecutedAfterAll
</code></pre><h1 id="JUnit断言"><a href="#JUnit断言" class="headerlink" title="JUnit断言"></a>JUnit断言</h1><p>在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。</p>
<table><br><tr><td>断言</td><td>描述</td></tr><br><tr><td>void assertEquals([String message], expected value, actual value)</td><td>断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息</td></tr><br><tr><td>void assertTrue([String message], boolean condition)</td><td>断言一个条件为真</td></tr><br><tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr><br><tr><td>void assertNotNull([String message], java.lang.Object object)</td><td>断言一个对象不为空(null)</td></tr><br><tr><td>void assertNull([String message], java.lang.Object object)</td><td>断言一个对象为空(null)</td></tr><br><tr><td>void assertSame([String message], java.lang.Object expected, java.lang.Object actual)</td><td>断言，两个对象引用相同的对象</td></tr><br><tr><td>void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)</td><td>断言，两个对象不是引用同一个对象</td></tr><br><tr><td>void assertArrayEquals([String message], expectedArray, resultArray)</td><td>断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object.</td></tr><br></table>

<p> 让我们看的一些前述断言的一个例子。</p>
<pre><code>AssertionsTest.java

package com.yiibai.junit;

import static org.junit.Assert.*;
import org.junit.Test;

public class AssertionsTest {

@Test
public void test() {
    String obj1 = &quot;junit&quot;;
    String obj2 = &quot;junit&quot;;
    String obj3 = &quot;test&quot;;
    String obj4 = &quot;test&quot;;
    String obj5 = null;
    int var1 = 1;
    int var2 = 2;
    int[] arithmetic1 = { 1, 2, 3 };
    int[] arithmetic2 = { 1, 2, 3 };

    assertEquals(obj1, obj2);

    assertSame(obj3, obj4);

    assertNotSame(obj2, obj4);

    assertNotNull(obj1);

    assertNull(obj5);

    assertTrue(var1  var2);

    assertArrayEquals(arithmetic1, arithmetic2);
}

}
</code></pre><p>在以上类中我们可以看到，这些断言方法是可以工作的。</p>
<ul>
<li>assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。</li>
<li>assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。</li>
<li>assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。</li>
<li>assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。</li>
<li>assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。</li>
</ul>
<blockquote>
<p>文章转载自：易百教程 [http:/www.yiibai.com]</p>
</blockquote>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA学习之MySQL]]></title>
      <url>http://mutouspace.cn/2017/03/21/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8BMySQL/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<blockquote>
<p>本文主要记录MySQL数据库的简单使用。<br>本部分记录了MySQL的安装、卸载，SQL语句的基础。</p>
<p>转载请注明：转载于Terry Tian的博客（<a href="www.mutouspace.cn">www.mutouspace.cn</a>）!</p>
</blockquote>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p><strong>数据库（DataBase，DB）：</strong>指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统)</p>
<p><strong>数据库管理系统（DataBase Management System，DBMS）：</strong>指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。</p>
<p><em>数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。</em></p>
<blockquote>
<p>数据库：存储、维护和管理数据的集合。</p>
</blockquote>
<h1 id="数据库的安装与配置"><a href="#数据库的安装与配置" class="headerlink" title="数据库的安装与配置"></a>数据库的安装与配置</h1><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="卸载与修改密码"><a href="#卸载与修改密码" class="headerlink" title="卸载与修改密码"></a>卸载与修改密码</h2><p><strong>卸载：</strong></p>
<ol>
<li><p>停止mysql服务   net stop mysql       启动mysql服务  net start mysql</p>
</li>
<li><p>卸载mysql</p>
</li>
<li><p>找到mysql 安装目录下的 my.ini   datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</p>
</li>
</ol>
<p><strong>修改密码</strong></p>
<p>运行cmd</p>
<p> 安装成功了打开cmd  –&gt; mysql -uroot -p你的密码</p>
<p> 修改mysql root用户密码</p>
<p>1) 停止mysql服务 运行输入services.msc 停止mysql服务</p>
<pre><code>或者 cmd --&gt;  net stop mysql
</code></pre><p>2) 在cmd下 输入 mysqld –skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口）</p>
<p>3) 新打开cmd 输入mysql -u root -p 不需要密码 </p>
<pre><code>use mysql;

update user set password=password(&apos;abc&apos;) WHERE User=&apos;root&apos;;
</code></pre><p>4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 </p>
<p>5) 在服务管理页面 重启mysql 服务</p>
<p>密码修改完成</p>
<h1 id="sql概述"><a href="#sql概述" class="headerlink" title="sql概述"></a>sql概述</h1><blockquote>
<p>SQL：Structure Query Language。（结构化查询语言）</p>
</blockquote>
<h1 id="Sql的分类"><a href="#Sql的分类" class="headerlink" title="Sql的分类"></a>Sql的分类</h1><p><strong>DDL（Data Definition Language）：</strong>数据定义语言，用来定义数据库对象：库、表、列等；     CREATE、 ALTER、DROP</p>
<p><strong>DML（Data Manipulation Language）：</strong>数据操作语言，用来定义数据库记录（数据）；        INSERT、 UPDATE、 DELETE</p>
<p><strong>DCL（Data Control Language）：</strong>数据控制语言，用来定义访问权限和安全级别；</p>
<p><strong>DQL（Data Query Language）：</strong>数据查询语言，用来查询记录（数据）。SELECT</p>
<p><strong>注意：sql语句以;结尾</strong></p>
<h2 id="DDL-操作数据库、表、列等"><a href="#DDL-操作数据库、表、列等" class="headerlink" title="DDL:操作数据库、表、列等"></a>DDL:操作数据库、表、列等</h2><blockquote>
<p>使用的关键字：CREATE、 ALTER、 DROP</p>
</blockquote>
<p><strong>example:</strong></p>
<pre><code>CREATE TABLE emp (
id INT,
NAME VARCHAR(50),
gender VARCHAR(10),
birthday DATE,
entry_date DATE,
job VARCHAR(100),
salary DOUBLE,
RESUME VARCHAR(200)
);
-- 查看表的字段信息
DESC emp;
-- 在emp TABLE中添加image列
ALTER TABLE emp ADD image BLOB;
-- 修改job列，使其长度为60。
ALTER TABLE emp MODIFY job VARCHAR(60);
-- 删除image列,一次只能删一列。
ALTER TABLE emp DROP image;
-- 表名改为USER。
RENAME TABLE emp TO USER;
-- 查看表格的创建细节
SHOW CREATE TABLE USER;
-- 修改表的字符集为gbk
ALTER TABLE USER CHARACTER SET gbk;
-- 列名NAME修改为username
ALTER TABLE USER CHANGE NAME username VARCHAR(100);

DESC USER;
-- 删除表
DROP TABLE USER ;
</code></pre><h2 id="DML操作-重要"><a href="#DML操作-重要" class="headerlink" title="DML操作(重要)"></a>DML操作(重要)</h2><h3 id="插入操作：INSERT"><a href="#插入操作：INSERT" class="headerlink" title="插入操作：INSERT"></a>插入操作：INSERT</h3><p><strong>语法：</strong> INSERT INTO 表名（列名1，列名2 …）VALUES(列值1，列值2…);<br><strong>注意：</strong>列名与列值的类型、个数、顺序要一一对应。</p>
<p>可以把列名当做java中的形参，把列值当做实参。</p>
<p>值不要超出列定义的长度。</p>
<p>如果插入空值，请使用null</p>
<p>插入的日期和字符一样，都使用引号括起来。</p>
<p><strong>练习 ：</strong></p>
<pre><code>create table emp(
id int,
name varchar(100),
gender varchar(10),
birthday date,
salary float(10,2),
entry_date date,
resume text
);

INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)
VALUES(1,&apos;zhangsan&apos;,&apos;female&apos;,&apos;1990-5-10&apos;,10000,&apos;2015-5-5-&apos;,&apos;good girl&apos;);

INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)
VALUES(2,&apos;lisi&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);

INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume)
VALUES(3,&apos;wangwu&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;);

-- 批量插入：
INSERT INTO emp VALUES
(4,&apos;zs&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),
(5,&apos;li&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL),
(6,&apos;ww&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL);
</code></pre><h3 id="修改操作-UPDATE"><a href="#修改操作-UPDATE" class="headerlink" title="修改操作 UPDATE"></a>修改操作 UPDATE</h3><p><strong>语法：</strong>UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值</p>
<p><strong>练习 ：</strong></p>
<pre><code>-- 将所有员工薪水修改为5000元。
UPDATE emp SET salary=5000 
-- 将姓名为’tom’的员工薪水修改为3000元。
UPDATE emp SET salary=3000 WHERE NAME=&apos;tom&apos;;
-- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。
 UPDATE emp SET salary=4000,gender=&apos;female&apos; WHERE NAME=&apos;jerry&apos;;
-- 将蔡依林的薪水在原有基础上增加1000元。
 UPDATE emp SET salary=salary+1000 WHERE NAME = &apos;蔡依林&apos;;
</code></pre><h3 id="删除操作-DELETE"><a href="#删除操作-DELETE" class="headerlink" title="删除操作 DELETE"></a>删除操作 DELETE</h3><p><strong>语法 ：</strong> DELETE FROM 表名 【WHERE 列名=值】</p>
<p><strong>练习 ：</strong></p>
<pre><code>-- 删除表中名称为’zs’的记录。
DELETE FROM emp WHERE NAME=‘tom’;
-- 删除表中所有记录。
DELETE FROM emp;
-- 使用truncate删除表中记录。
TRUNCATE TABLE emp;
</code></pre><blockquote>
<p>DELETE 删除表中的数据，表结构还在;删除后的数据可以找回<br> TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。<br> 删除的数据不能找回。执行速度比DELETE快。</p>
</blockquote>
<h2 id="DQL操作"><a href="#DQL操作" class="headerlink" title="DQL操作"></a>DQL操作</h2><blockquote>
<p>DQL数据查询语言 （重要）<br>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。<br>查询返回的结果集是一张虚拟表。</p>
</blockquote>
<p><strong>查询关键字：</strong>SELECT<br><strong>语法：</strong> SELECT 列名 FROM表名<br>【WHERE –&gt; GROUP BY –&gt;HAVING–&gt; ORDER BY】</p>
<p><strong>语法：</strong></p>
<pre><code>SELECT selection_list /*要查询的列名称*/
FROM table_list /*要查询的表名称*/
WHERE condition /*行条件*/
GROUP BY grouping_columns /*对结果分组*/
HAVING condition /*分组后的行条件*/
ORDER BY sorting_columns /*对结果分组*/
LIMIT offset_start, row_count /*结果限定*/
</code></pre><p>开始之前让我们先建几个表并插入数据</p>
<pre><code>CREATE TABLE stu (
    sid    CHAR(6),
    sname        VARCHAR(50),
    age        INT,
    gender    VARCHAR(50)
);

INSERT INTO stu VALUES(&apos;S_1001&apos;, &apos;liuYi&apos;, 35, &apos;male&apos;);
INSERT INTO stu VALUES(&apos;S_1002&apos;, &apos;chenEr&apos;, 15, &apos;female&apos;);
INSERT INTO stu VALUES(&apos;S_1003&apos;, &apos;zhangSan&apos;, 95, &apos;male&apos;);
INSERT INTO stu VALUES(&apos;S_1004&apos;, &apos;liSi&apos;, 65, &apos;female&apos;);
INSERT INTO stu VALUES(&apos;S_1005&apos;, &apos;wangWu&apos;, 55, &apos;male&apos;);
INSERT INTO stu VALUES(&apos;S_1006&apos;, &apos;zhaoLiu&apos;, 75, &apos;female&apos;);
INSERT INTO stu VALUES(&apos;S_1007&apos;, &apos;sunQi&apos;, 25, &apos;male&apos;);
INSERT INTO stu VALUES(&apos;S_1008&apos;, &apos;zhouBa&apos;, 45, &apos;female&apos;);
INSERT INTO stu VALUES(&apos;S_1009&apos;, &apos;wuJiu&apos;, 85, &apos;male&apos;);
INSERT INTO stu VALUES(&apos;S_1010&apos;, &apos;zhengShi&apos;, 5, &apos;female&apos;);
INSERT INTO stu VALUES(&apos;S_1011&apos;, &apos;xxx&apos;, NULL, NULL);


CREATE TABLE emp(
    empno        INT,
    ename        VARCHAR(50),
    job        VARCHAR(50),
    mgr        INT,
    hiredate    DATE,
    sal        DECIMAL(7,2),
    comm        DECIMAL(7,2),
    deptno        INT
) ;

INSERT INTO emp VALUES(7369,&apos;SMITH&apos;,&apos;CLERK&apos;,7902,&apos;1980-12-17&apos;,800,NULL,20);
INSERT INTO emp VALUES(7499,&apos;ALLEN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-20&apos;,1600,300,30);
INSERT INTO emp VALUES(7521,&apos;WARD&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-22&apos;,1250,500,30);
INSERT INTO emp VALUES(7566,&apos;JONES&apos;,&apos;MANAGER&apos;,7839,&apos;1981-04-02&apos;,2975,NULL,20);
INSERT INTO emp VALUES(7654,&apos;MARTIN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-28&apos;,1250,1400,30);
INSERT INTO emp VALUES(7698,&apos;BLAKE&apos;,&apos;MANAGER&apos;,7839,&apos;1981-05-01&apos;,2850,NULL,30);
INSERT INTO emp VALUES(7782,&apos;CLARK&apos;,&apos;MANAGER&apos;,7839,&apos;1981-06-09&apos;,2450,NULL,10);
INSERT INTO emp VALUES(7788,&apos;SCOTT&apos;,&apos;ANALYST&apos;,7566,&apos;1987-04-19&apos;,3000,NULL,20);
INSERT INTO emp VALUES(7839,&apos;KING&apos;,&apos;PRESIDENT&apos;,NULL,&apos;1981-11-17&apos;,5000,NULL,10);
INSERT INTO emp VALUES(7844,&apos;TURNER&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-08&apos;,1500,0,30);
INSERT INTO emp VALUES(7876,&apos;ADAMS&apos;,&apos;CLERK&apos;,7788,&apos;1987-05-23&apos;,1100,NULL,20);
INSERT INTO emp VALUES(7900,&apos;JAMES&apos;,&apos;CLERK&apos;,7698,&apos;1981-12-03&apos;,950,NULL,30);
INSERT INTO emp VALUES(7902,&apos;FORD&apos;,&apos;ANALYST&apos;,7566,&apos;1981-12-03&apos;,3000,NULL,20);
INSERT INTO emp VALUES(7934,&apos;MILLER&apos;,&apos;CLERK&apos;,7782,&apos;1982-01-23&apos;,1300,NULL,10);


CREATE TABLE dept(
    deptno        INT,
    dname        VARCHAR(14),
    loc        VARCHAR(13)
);

INSERT INTO dept VALUES(10, &apos;ACCOUNTING&apos;, &apos;NEW YORK&apos;);
INSERT INTO dept VALUES(20, &apos;RESEARCH&apos;, &apos;DALLAS&apos;);
INSERT INTO dept VALUES(30, &apos;SALES&apos;, &apos;CHICAGO&apos;);
INSERT INTO dept VALUES(40, &apos;OPERATIONS&apos;, &apos;BOSTON&apos;);
</code></pre><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p>1.1　查询所有列</p>
<pre><code>SELECT * FROM stu;
</code></pre><p>1.2　查询指定列</p>
<pre><code>SELECT sid, sname, age FROM stu;
</code></pre><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><pre><code>-- 查询性别为女，并且年龄&gt;=50的记录
SELECT * FROM stu WHERE gender=&apos;female&apos; AND age &gt;=50;

-- 查询学号为S_1001，或者姓名为liSi的记录
SELECT * FROM stu 
WHERE sid =&apos;S_1001&apos; OR sname=&apos;liSi&apos;;

-- 查询学号为S_1001，S_1002，S_1003的记录
SELECT * FROM stu 
WHERE sid IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);

-- 查询学号不是S_1001，S_1002，S_1003的记录
SELECT * FROM stu 
WHERE sid NOT IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;);

-- 查询年龄为null的记录
SELECT * FROM stu
WHERE age IS NULL;

-- 查询年龄在20到40之间的学生记录
SELECT * 
FROM stu
WHERE age&gt;=20 AND age&lt;=40;
-- 或者
SELECT * 
FROM stu 
WHERE age BETWEEN 20 AND 40;

-- 查询性别非男的学生记录
SELECT * 
FROM stu
WHERE gender!=&apos;male&apos;;
-- 或者
SELECT * 
FROM stu
WHERE gender&lt;&gt;&apos;male&apos;;
-- 或者
SELECT * 
FROM stu
WHERE NOT gender=&apos;male&apos;;

-- 查询姓名不为null的学生记录

SELECT * FROM stu WHERE sname IS NOT NULL;
</code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><blockquote>
<p>当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。</p>
</blockquote>
<p><strong>通配符:</strong> </p>
<pre><code>_ ：任意一个字符

  % ：任意0~n个字符
</code></pre><p><strong>Example:</strong></p>
<pre><code>-- 查询姓名由5个字母构成的学生记录
SELECT * 
FROM stu
WHERE sname LIKE &apos;_____&apos;;
-- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。

-- 3.2　查询姓名由5个字母构成，并且第5个字母为“i”的学生记录
SELECT * 
FROM stu
WHERE sname LIKE &apos;____i&apos;;

-- 3.3　查询姓名以“z”开头的学生记录
SELECT * 
FROM stu
WHERE sname LIKE &apos;z%&apos;;
-- 其中“%”匹配0~n个任何字母。

-- 3.4　查询姓名中第2个字母为“i”的学生记录
SELECT * 
FROM stu
WHERE sname LIKE &apos;_i%&apos;;

-- 3.5　查询姓名中包含“a”字母的学生记录
SELECT * 
FROM stu
WHERE sname LIKE &apos;%a%&apos;;
</code></pre><h3 id="字段控制查询"><a href="#字段控制查询" class="headerlink" title="字段控制查询"></a>字段控制查询</h3><pre><code>SELECT * FROM emp;
-- 去除重复记录
SELECT DISTINCT deptno,mgr FROM emp;

-- 查看雇员的月薪与佣金之和
SELECT * ,sal+comm FROM emp;
-- 过滤null 并起别名
SELECT * ,sal+IFNULL(comm,0) AS total FROM emp;
</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote>
<p>order by 列名 asc(默认) desc</p>
</blockquote>
<pre><code>-- 查询所有学生记录，按年龄升序排序
SELECT * FROM stu ORDER BY age ASC;
-- 查询所有学生记录，按年龄降序排序
SELECT * FROM stu ORDER BY age DESC;
-- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序
SELECT * FROM emp
ORDER BY sal DESC,empno ASC;
</code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote>
<p>聚合函数是用来做纵向运算的函数：</p>
<p>COUNT()：统计指定列不为NULL的记录行数；</p>
<p>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</p>
<p>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</p>
<p>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</p>
<p>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</p>
</blockquote>
<pre><code>-- 查询emp表中记录数：
SELECT COUNT(*) AS cnt FROM emp;

-- 查询emp表中有佣金的人数：
SELECT COUNT(comm) cnt FROM emp;
-- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。

-- 查询emp表中月薪大于2500的人数：
SELECT COUNT(*) FROM emp
WHERE sal &gt; 2500;

-- 统计月薪与佣金之和大于2500元的人数：
SELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) &gt; 2500;

-- 查询有佣金的人数，有领导的人数：
SELECT COUNT(comm), COUNT(mgr) FROM emp;


-- 查询所有雇员月薪和：
SELECT SUM(sal) FROM emp;

-- 查询所有雇员月薪和，以及所有雇员佣金和：
SELECT SUM(sal), SUM(comm) FROM emp;

-- 查询所有雇员月薪+佣金和：
SELECT SUM(sal+IFNULL(comm,0)) FROM emp;

-- 统计所有员工平均工资：
SELECT AVG(sal) FROM emp;

-- MAX和MIN
-- 查询最高工资和最低工资：
SELECT MAX(sal), MIN(sal) FROM emp;
</code></pre><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><blockquote>
<p>注：凡和聚合函数同时出现的列名，一定要写在group by 之后</p>
</blockquote>
<pre><code>-- 查询每个部门的部门编号和每个部门的工资和：
SELECT deptno, SUM(sal)
FROM emp
GROUP BY deptno;

-- 查询每个部门的部门编号以及每个部门的人数：
SELECT deptno,COUNT(*)
FROM emp
GROUP BY deptno;

-- 查询每个部门的部门编号以及每个部门工资大于1500的人数：
SELECT deptno,COUNT(*)
FROM emp
WHERE sal&gt;1500
GROUP BY deptno;

-- 查询工资总和大于9000的部门编号以及工资和：
SELECT deptno, SUM(sal)
FROM emp
GROUP BY deptno
HAVING SUM(sal) &gt; 9000;
</code></pre><p><strong>注：</strong></p>
<p>  <em>having与where的区别:</em></p>
<pre><code>1.having是在分组后对数据进行过滤.

  where是在分组前对数据进行过滤

2.having后面可以使用聚合函数(统计函数)

  where后面不可以使用聚合函数。
</code></pre><p><em>WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。</em></p>
<h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><blockquote>
<p>LIMIT用来限定查询结果的起始行，以及总行数。</p>
</blockquote>
<pre><code>-- 查询5行记录，起始行从0开始
SELECT * FROM emp LIMIT 0, 5;
-- 查询10行记录，起始行从3开始
SELECT * FROM emp LIMIT 3, 10;
</code></pre></the></excerpt>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习笔记系列]]></title>
      <url>http://mutouspace.cn/2017/03/09/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><h2 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>Git有什么特点？简单来说就是：高端大气上档次！</p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<p>那什么是版本控制系统？</p>
<p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p>
<p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/mMlEWSp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p>
<p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p>
<p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p>
<p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p>
<p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p>
<table><br>    <tr><br>     <th>版本</th><br>     <th>用户</th><br>     <th>说明</th><br>     <th>日期</th><br>    </tr><br>    <tr><br>     <th>1</th><br>     <th>张三</th><br>     <th> 删除了软件服务条款5</th><br>     <th>7/12 10:38</th><br>    </tr><br>    <tr><br>     <th>2</th><br>     <th>张三</th><br>     <th>增加了License人数限制</th><br>     <th>7/12 18:09</th><br>    </tr><br>    <tr><br>     <th>3</th><br>     <th>李四</th><br>     <th>财务部门调整了合同金额</th><br>     <th>7/13 9:51</th><br>    </tr><br>    <tr><br>     <th>4</th><br>     <th>张三</th><br>     <th>延长了免费升级周期</th><br>     <th>7/14 15:17</th><br>    </tr><br><br></table>


<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p>
<p>参考廖雪峰的网站：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000</a></p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>要使用Git，第一步当然是安装Git了。由于笔者使用的windows系统，所以此处只介绍在Windows环境下如何安装Git。</p>
<p>在Windows上安装Git</p>
<p>想要在Windows下安装Git，首先要下载Git安装包，用户可以从<a href="https://git-scm.com/download/" target="_blank" rel="external">https://git-scm.com/download/</a>下载，然后按默认选项安装即可。</p>
<p>安装完成后，在开始菜单里找到<code>“Git”-&gt;“Git Bash”</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>
<p>安装完成后，还需要最后一步设置，在命令行输入：</p>
<pre><code>$ git config - -global user.name &quot;Your Name&quot;

$ git config - -global user.email &quot;email@example.com&quot;
</code></pre><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>
<p><strong>注意:</strong></p>
<p>   <em>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</em></p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>什么是版本库呢？</p>
<p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/pAAV2BI.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>$ mkdir tq1

$ cd tq1
</code></pre><p><strong>注意：</strong>Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p>
<p>第二步，通过git init命令把这个目录变成Git可以管理的仓库：</p>
<pre><code>$ git init
Initialized empty Git repository in F：/AndroidProject2/tq1/.git/
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/z9iyBEd.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
<p>把文件添加到版本库</p>
<p>现在我们编写一个readme.txt文件，内容如下：</p>
<pre><code>Git is a version control system.
Git is free software.
</code></pre><p>一定要放到tq1目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
<p>第一步，用命令git add告诉Git，把文件添加到仓库：</p>
<pre><code>$ git add readme.txt
</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>第二步，用命令git commit告诉Git，把文件提交到仓库：</p>
<pre><code>$ git commit -m &quot;wrote a readme file&quot;
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
</code></pre><p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>嫌麻烦不想输入-m “xxx”行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p>
<p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p>
<p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>
<pre><code>$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m &quot;add 3 files.&quot;
</code></pre><p><strong>小结</strong></p>
<p>现在总结一下今天学的两点内容：</p>
<p>初始化一个Git仓库，使用git init命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ul>
<li><p>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></p>
</li>
<li><p>第二步，使用命令git commit，完成。</p>
</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>到目前为止，我们已经掌握了如何在Git仓库里对一个文件进行时光穿梭，你再也不用担心文件备份或者丢失的问题了。</p>
<p>可是有用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN里早就有了，没看出Git有什么特别的地方。</p>
<p>没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。为了保证你现在所学的Git物超所值，将来绝对不会后悔，同时为了打击已经不幸学了SVN的童鞋，本章开始介绍Git的杀手级功能之一（注意是之一，也就是后面还有之二，之三……）：远程仓库。</p>
<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p>
<p>你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？</p>
<p>其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。</p>
<p>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p>
<p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫Coding的神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个Coding账号，就可以免费获得Git远程仓库。</p>
<p>在继续阅读后续内容前，请自行注册Coding账号。由于你的本地Git仓库和Coding仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>
<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<em>id_rsa</em>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
</code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>
<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>第2步：登陆Coding，打开“设置”，“部署公钥”页面：</p>
<p>然后，点“新建部署公钥”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/pCnS7jM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点“添加”，你就应该看到已经添加的Key：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/F72JWoO.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>为什么Coding需要SSH Key呢？因为Coding需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，Coding只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>当然，Coding允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到Conding，就可以在每台电脑上往Coding推送了。</p>
<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>
<p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p>
<p>确保你拥有一个Coding账号后，我们就即将开始远程仓库的学习。</p>
<h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在Coding创建一个Git仓库，并且让这两个仓库进行远程同步，这样，Coding上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>
<p>首先，登陆Coding，然后，在右上角的“+”找到“项目”按钮，创建一个新的仓库：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/rGh1dMG.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在 <strong>项目名称</strong> 填入<em>tq1</em>，其他保持默认设置，点击“创建项目”按钮，就成功地创建了一个新的Git仓库，目前，在Coding的这个<em>tq1</em>仓库还是空的，点击左侧“代码”选项：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/jyKEHdy.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Coding告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到Coding仓库。</p>
<p>现在，我们根据Coding的提示，在本地的<em>tq1</em>仓库下运行命令：</p>
<pre><code>git remote add origin git@git.coding.net:Mu_TQ/tq1.git
</code></pre><p>请千万注意，把上面的Mu_TQ替换成你自己的Coding账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH<br> Key公钥不在我的账户列表中。</p>
<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<pre><code>$ git push -u origin master
Counting objects: 19, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (19/19), 13.73 KiB, done.
Total 23 (delta 6), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new branch]  master -&gt; master
Branch master set up to track remote branch master from origin.
</code></pre><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/jkPoobd.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<pre><code>$ git push origin master
</code></pre><p>把本地master分支的最新修改推送至Coding，现在，你就拥有了真正的分布式版本库！</p>
<p><strong>SSH警告</strong></p>
<p>当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：</p>
<pre><code>The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
</code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p>
<p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>
<pre><code>Warning: Permanently added &apos;github.com&apos; (RSA) to the list of known hosts.
</code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p>
<p>如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA<br> Key的指纹信息是否与SSH连接给出的一致。</p>
<p><strong>小结</strong></p>
<p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>
<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软件分享篇（Windows10）]]></title>
      <url>http://mutouspace.cn/2017/03/06/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB%E7%AF%87/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<blockquote>
<p>今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！</p>
</blockquote>
<p>转载请注明：转载于Terry Tian的博客（<a href="www.mutouspace.cn">www.mutouspace.cn</a>）!</p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="安全杀毒："><a href="#安全杀毒：" class="headerlink" title="安全杀毒："></a>安全杀毒：</h1><p>   TT电脑里用的杀毒防护软件是Windows系统自带的<strong>Windows Defender</strong>，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下：</p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/Windowsdefender.PNG" alt="软件截图"></p>
<p>   清理软件我用的是口碑很好的 <a href="http://www.piriform.com/ccleaner" target="_blank" rel="external">CCleaner</a>,功能完全足够你使用了！截图如下：</p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/cc.PNG" alt="CC"></p>
<p>   对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！</p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>  <strong>Android Studio</strong>：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！</p>
<p>  <strong>eclipse</strong>：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。</p>
<p>  <strong>SQLite Expert Personal</strong>：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！</p>
<h1 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h1><p>  <strong>chrome：</strong>好用的不能再好用的浏览器。插件丰富，但需要科学上网。<br>             缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。</p>
<p>  <strong>MarkdownPad 2：</strong>我认为这可能是Windows系统下最好用的markdown书写软件了，可以去<a href="http://markdownpad.com/" target="_blank" rel="external">官网</a>下载。</p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/md.PNG" alt=""></p>
<p>  <strong>Seer</strong>:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。<a href="http://www.appinn.com/seer-windows/" target="_blank" rel="external">下载地址：http://www.appinn.com/seer-windows/</a>。</p>
<p>  <strong>护眼宝：</strong>是一款护眼的工具，<a href="http://www.huyanbao.com/#top" target="_blank" rel="external">下载地址：http://www.huyanbao.com/#top</a>。</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/hyb.PNG" alt=""></p>
<p>  <strong>Clover:</strong><a href="http://cn.ejie.me/" target="_blank" rel="external">Clover</a> 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/clover.jpg" alt=""></p>
<p>  <strong>ADSafe：</strong><a href="http://www.newadblock.com/" target="_blank" rel="external">ADSafe</a>是一款好用的广告屏蔽软件！</p>
<p>  <strong>HoneyView:</strong><a href="https://www.bandisoft.com/honeyview/cn/" target="_blank" rel="external">HoneyView</a>是一个支持多种格式的极速图像浏览器。<br>  她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。<br>  她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。</p>
<p><strong>影音工具</strong></p>
<p>  <strong>网易云音乐（UWP）：</strong>逼格漫漫的音乐播放器。</p>
<p>  <strong>Potplayer：</strong><a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="external">PotPlayer</a>诚意满满的视频播放器。</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/potp.PNG" alt=""></p>
<h1 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><p>  <strong>IDM：</strong>Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/idm.PNG" alt=""></p>
<p>  <strong>EagleGet:</strong><a href="http://www.eagleget.com/" target="_blank" rel="external">EagleGet</a>（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/eg.PNG" alt=""></p>
<p>  <strong>迅雷：</strong>国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。</p>
<p>  <strong><em>分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！</em></strong></p>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[胡歌为什么会有今天的高度？]]></title>
      <url>http://mutouspace.cn/2017/02/19/%E8%83%A1%E6%AD%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E4%BB%8A%E5%A4%A9%E7%9A%84%E9%AB%98%E5%BA%A6%EF%BC%9F/</url>
      <content type="html"><![CDATA[<style type="text/css">
    strong a {
        color: #747474;
    }
    .player {
        text-align: center;
        margin: .5em auto 0;
        width: 100%;
        max-width: 22em;
    }
    .player br {
        display: none;
    }
    .sign {
        text-align: right;
        font-style: italic;
    }
    #ds-recent-visitors {
        margin: 0;
        padding: 0;
    }
    #ds-recent-visitors div img {
        display: inline-block !important;
        width: 56px !important;
        height: 56px !important;
        border-radius: 50%;
        border: 1px solid #ddd;
        padding: 2px;
        box-shadow: 1px 1px 1px rgba(0,0,0, .15);
    }
    .article-entry img:first-child {
        display: block;
    }
    .article-entry span {
        font-family: Arial;
    }
    #ds-hot-posts {
        display: none;
    }
</style>

<excerpt in="" index="" |="" 首页摘要="">

<p><strong>本文转载于微信公众号：小林分享</strong></p>
<p><strong>藏书如山积，读书如水流。山形有限度，水流无时休。</strong></p>
<p class="sign"><span>——</span> Terry_Tian, 2017年2月19日</p>

<p>在娱乐圈里，想通过大荧幕红透半边天的人有很多。</p>
<p>但能够沉下心，通过学习和阅读来提升自己的不多。</p>
<p><strong>胡歌</strong>算一个。</p>
<a id="more"></a> 
<the rest="" of="" contents="" |="" 余下全文="">

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg1.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>去读书，是他多年想做而不得做的事。</p>
<p>时光悄然流逝，从曾经的少年心性，到如今的睿智成熟。</p>
<p>胡歌唯一没变的，就是对学习的向往。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg2.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>甚至决定为了深造的事宜，暂时息影两年。</p>
<p>其实，这个决定早就有端倪，春晚结束后有媒体采访胡歌，他说：“2017年将作为自己的学习阶段，继续深造。”</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg3.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>果然，不久之后，就有人在美国大使馆相逢正在办理签证的胡歌，也有人在机场拍下这张照片。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg4.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>手里抱着书，翘着二郎腿，身旁时贴满行李条的行李箱和背包，内心却是“独钓寒江雪”的怡然自得。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg5.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>2005年，胡歌因为成功塑造了电视剧《仙剑奇侠传》中豪爽深情的“李逍遥”一角而成名，迅速跻身“四大小生”头列，广告签约不断，无数粉丝热捧。</p>
<p>原本蓄力满满，却一瞬跌入谷底。</p>
<p>2006年，胡歌和助理乘坐的汽车突然和另一货车发生碰撞，助理当场死亡，胡歌也遭遇重创。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg6.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>那段时间，是胡歌有记忆的人生里最痛苦的岁月。</p>
<p>为了让自己振作起来，胡歌开始大量的阅读，写专栏。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg7.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg9.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在这篇题为《照镜子》的专栏中，胡歌写：</p>
<blockquote>
<p>车祸创伤了我的容貌，也冲击了我的内心。</p>
<p>每次当我战战兢兢拿起镜子的时候，我都渴望能在镜子里寻找到勇气和力量。</p>
<p>镜子的语言简洁而充满了智能，除了我自己，没有人能够让我真正重新站立。</p>
<p>如果皮囊难以修复，就用思想去填满它吧。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg11.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>嗯，用思想慢慢填充皮囊。</p>
<p>他开始摄影、参与公益，等待伤口被修复，也等待被击垮的自信重新建立起来。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg12.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>丢了少年容颜，拾得一个更广阔的世界，在书里，安心的当自己的主演。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg13.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>2007年6月22日，胡歌宣布复出。</p>
<p>重回大众视线的胡歌，与车祸之前相比，脸上多了几许忧郁。</p>
<p>为了遮盖自己右眼的伤疤，他全程带着黑框眼镜。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg14.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在拍仙三的时候，也用头发遮住自己手上的眼骨，可眼神里却是历经爱恨生死之后的沧桑。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg15.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>从那之后，他旅行、阅读、修复容貌……</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg17.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>2015年，带着饱满思想回归的胡歌，强势推出了《琅琊榜》和《伪装者》两部作品，重新回归大众视野。</p>
<p>也被很多人调侃说，二红。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg18.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg19.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>彼时，他深陷磨难，几度忧伤和消沉。</p>
<p>此时，他褪去青涩，愈加真实和沉稳。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg20.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg21.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如今，胡歌是娱乐圈公认的高情商，阅读塑造了他严密的思维逻辑，也让他在浮躁复杂的娱乐圈里，游走自如。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg23.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg24.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>2016年白玉兰颁奖典礼上，胡歌成为该奖项的首个80后视帝。</p>
<p>台下坐着无数前辈，更让人为难的是，私下最好的朋友，也是竞争对手的大哥靳东，也在台下坐着，主持人主动挑起话题：</p>
<p>拿到视帝的胡歌想对靳东说点什么呢？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg25.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>胡歌的回应就很棒：</p>
<blockquote>
<p>在戏里我们是家人，戏外我们也是家人，这个奖项不管谁拿都是咱家的。我刚和敏涛姐说，不管是谁拿了奖，这个奖都是挂在咱们家的墙上。</p>
</blockquote>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/hg26.webp.jpg" alt=""></p>
<p>没有人会好运一辈子，也许生命中那些独自隐忍的时刻，就是让一个人更接近自己的机会。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg27.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>胡歌在阅读里得到新生、填补灵魂，给了我们对于“阅读的意义”最好诠释：</p>
<p>阅读是为了让我们更好的认识自己，成为更好的自己。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://olg3gwtbm.bkt.clouddn.com/hg28.webp.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</the></excerpt>]]></content>
      
        <categories>
            
            <category> 美文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 美文 </tag>
            
            <tag> 杂记 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo+github建设个人博客教程]]></title>
      <url>http://mutouspace.cn/2017/02/18/%E4%BD%BF%E7%94%A8Hexo-github%E5%BB%BA%E8%AE%BE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""></excerpt></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主本来打算在Coding上搭建自己的Ghost博客，由于以前没有搭建博客的经验，就在网上百度教程，但很遗憾，教程很少，写的也比较简单，最终在别人的推荐下，选择了Hexo搭建静态博客。</p>
<p><strong>教程思路：</strong></p>
<ol>
<li>列出博客搭建环境+所需工具；</li>
<li>环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架；</li>
<li>创建Hexo项目，并本地运行查看效果</li>
<li>修改项目配置文件（根目录下的_config.yml文件）</li>
<li>安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件</li>
<li>将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章）</li>
<li>总结</li>
</ol>
<a id="more"></a> 
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在搭建博客时，你需要做以下准备：</p>
<ol>
<li>确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。)</li>
<li>Git下载，node.js下载。</li>
</ol>
<p>本文所使用的环境：</p>
<ul>
<li>Windows 10</li>
<li>Git  version 2.11.1.windows.1</li>
<li>node.js v6.9.5 LTS</li>
<li>hexo </li>
</ul>
<h1 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h1><h2 id="Git下载安装及简单实用"><a href="#Git下载安装及简单实用" class="headerlink" title="Git下载安装及简单实用"></a>Git下载安装及简单实用</h2><p>为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（<a href="http://blog.csdn.net/tianqingdezhuanlan/article/details/51791318" target="_blank" rel="external">Git的简单使用</a>），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。</p>
<p><strong>下载Git</strong></p>
<p>我们可以在<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git的官网</a>下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。</p>
<p><strong>安装Git</strong></p>
<p>Git的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：<a href="http://blog.csdn.net/tianqingdezhuanlan/article/details/51791368" target="_blank" rel="external">Git的安装</a>。</p>
<p><strong>Git的简单实用</strong></p>
<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<p>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</p>
<p>第二步，使用命令<code>git commit</code>，完成。</p>
<p>我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。</p>
<h2 id="node-js的下载安装"><a href="#node-js的下载安装" class="headerlink" title="node.js的下载安装"></a>node.js的下载安装</h2><p><strong>下载</strong></p>
<p>打开 <a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a> 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。</p>
<p><strong>安装</strong></p>
<p>双击安装文件 -&gt; 下一步 -&gt; 下一步…</p>
<p>【具体操作请参考网上的一篇文章：<a href="http://www.jianshu.com/p/03a76b2e7e00" target="_blank" rel="external">Node.js安装及环境配置之Windows篇</a>】</p>
<h2 id="Hexo框架的安装"><a href="#Hexo框架的安装" class="headerlink" title="Hexo框架的安装"></a>Hexo框架的安装</h2><p>首先我们可以看一下<a href="https://hexo.io/" target="_blank" rel="external">hexo</a>的官网，了解一下hexo。</p>
<p><strong>Windows中的安装</strong></p>
<ol>
<li><p>打开命令行</p>
<p>Win+R或者点击开始按钮–&gt;运行–&gt;输入“cmd”;</p>
<p>用 <strong>Git Bash</strong></p>
</li>
<li><p>输入命令</p>
<p><code>npm install hexo-cli -g</code></p>
</li>
</ol>
<p>输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。</p>
<h2 id="创建Hexo本地博客"><a href="#创建Hexo本地博客" class="headerlink" title="创建Hexo本地博客"></a>创建Hexo本地博客</h2><p> 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\TerryBlog】.在G盘下，点击鼠标右键–&gt;Git Bash，打开命令输入框。输入命令如下：</p>
<p>   <code>hexo init TerryBlog        //hexo init +你的项目名称，如我的为TerryBlog</code></p>
<p> 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下：</p>
<p>  <code>cd TerryBlog      //进入TerryBlog目录</code></p>
<p> 或者直接在TerryBlog文件夹下，再点击鼠标右键–&gt;Git Bash，打开命令输入框。再输入以下命令：</p>
<p>  <code>npm install</code></p>
<p> 安装完成之后，【G:\TerryBlog】目录结构是这样的：</p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/hexo1.jpg" alt=""></p>
<p>  到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下：</p>
<p>  <code>hexo s</code></p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/hexos.png" alt=""></p>
<p>   <strong><em>在浏览器中输入：<a href="http://localhost:4000/进行访问，效果图如下：" target="_blank" rel="external">http://localhost:4000/进行访问，效果图如下：</a></em></strong></p>
<p>   <img src="http://olg3gwtbm.bkt.clouddn.com/hexo4040.png" alt=""></p>
<pre><code>** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可**
</code></pre><p>   到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。</p>
<h1 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h1><p>  在这里我们修改的是【G:\TerryBlog】路径下的 <code>_config.yml</code> <strong>站点主题配置</strong>文件，我的配置如下：</p>
<p>  <strong>注意：修改之前最好备份一下。</strong></p>
<pre><code># Hexo Configuration
## Docs: https://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/

# Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的


title: Terry_Tian Code #网站标题
subtitle: 行是知之始   知是行之成  #网站副标题
description: 在山的这边，海的那边，有一只程序猿。。。  #描述
author: Terry Tian   #博主名字
avatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg  #博主头像
email: 1015236187@qq.com   #邮箱
language: zh-Hans  #语言
timezone:   #网站时区。Hexo默认使用电脑时区

# URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息
## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;
url: http://mutouspace.cn/
root: /
permalink: :year/:month/:day/:title/
permalink_defaults:

 # Directory
source_dir: source
public_dir: public
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code
i18n_dir: :lang
skip_render:

# Writing
new_post_name: :title.md # File name of new posts
default_layout: post
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
future: true
highlight:
  enable: true
  line_number: true
  auto_detect: false
  tab_replace:

# Category &amp; Tag
default_category: uncategorized
category_map:
tag_map:

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
 date_format: YYYY-MM-DD
 time_format: HH:mm:ss

 # Pagination
 ## Set per_page to 0 to disable pagination
 per_page: 10
 pagination_dir: page

 # Extensions
 ## Plugins: https://hexo.io/plugins/
 ## Themes: https://hexo.io/themes/
 theme: yelee

 # Deployment
 ## Docs: https://hexo.io/docs/deployment.html
 deploy:
   type: git
   repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git
   branch: master

 search:
   path: search.xml
   field: post
</code></pre><p>   做完这一些之后再在Git Bash 命令框中，输入 <code>hexo s</code> 重新启动服务，在浏览器中输入：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>进行访问,查看一下效果。</p>
<h1 id="安装Hexo框架主题"><a href="#安装Hexo框架主题" class="headerlink" title="安装Hexo框架主题"></a>安装Hexo框架主题</h1><p>  在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>.</p>
<p>  我选择的是yelee主题：<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">yelee</a></p>
<p>  还是让 Git Bash 保持在【G:\TerryBlog】目录下，然后输入命令：</p>
<p>  <code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></p>
<p>  这样就在 【G:\TerryBlog\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。</p>
<p>  我们现在要修改【G:\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。</p>
<p>  <strong>注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。</strong></p>
<p>  更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令：</p>
<p>   <code>hexo g      //重新生成静态博客的所有内容</code></p>
<p>   <code>hexo s        //重启 hexo 本地服务</code></p>
<p>  重新访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，看一下效果.</p>
<h2 id="修改Hexo框架主题"><a href="#修改Hexo框架主题" class="headerlink" title="修改Hexo框架主题"></a>修改Hexo框架主题</h2><p>  上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\TerryBlog\themes\yelee】路径下的 <code>_config.yml</code>文件。这里我们可以跟着<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee 主题使用说明</a>来修改。</p>
<h1 id="发布到Github-Pages上"><a href="#发布到Github-Pages上" class="headerlink" title="发布到Github Pages上"></a>发布到Github Pages上</h1><h2 id="创建Github-Pages并SSH授权"><a href="#创建Github-Pages并SSH授权" class="headerlink" title="创建Github Pages并SSH授权"></a>创建Github Pages并SSH授权</h2><p>  现在假设你已经有一个 Gtihub 账号，你还需要一个<strong>特别</strong>的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：MuouTQ，那我要创建的仓库名字完整滴填写是：MuouTQ.github.io，具体效果如下图：</p>
<p>  <img src="http://olg3gwtbm.bkt.clouddn.com/github1.png" alt=""></p>
<p>  仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。</p>
<p>  创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。</p>
<p>  【具体可以参考网上的一篇文章：<a href="http://www.jianshu.com/p/a3b4f61d4747" target="_blank" rel="external">Git安装及SSH Key管理之Windows篇</a>】</p>
<p>  现在用记事本打开公钥，复制文件中的所有内容。访问：<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>，</p>
<p>  Title：自己随便取</p>
<p>  Key：把刚刚复制的都粘贴进来</p>
<h2 id="把本地的博客内容同步到-Github-上"><a href="#把本地的博客内容同步到-Github-上" class="headerlink" title="把本地的博客内容同步到 Github 上"></a>把本地的博客内容同步到 Github 上</h2><p>   要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：</p>
<p>   <code>cd G:\TerryBlog              //进入TerryBlog项目目录</code></p>
<pre><code>上一步，我们可以到 G:\TerryBlog 路径下 Git Bash 一下；
</code></pre><p>  <code>npm/cnpm install hexo-server --save         //创建</code></p>
<p> <code>npm/cnpm install hexo-deployer-git --save    //安装自动部署发布工具</code></p>
<p>  编辑TerryBlog的<strong>项目配置文件</strong>：_config.yml</p>
<p>  官网对此配置的介绍：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html</a></p>
<p>  主要改这里（一般在最后面）：</p>
<pre><code> # Deployment
## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。
## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。
## Docs: https://hexo.io/docs/deployment.html
  deploy:
  type: git
  repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git
  branch: master
</code></pre><p>  编辑完项目配置文件后我们需要重新部署：</p>
<pre><code>cd G:\TerryBlog              //进入TerryBlog项目目录

上一步，我们可以到 G:\TerryBlog 路径下 Git Bash 一下；
hexo clean//先清除掉已经生成的旧文件
hexo g //再生成一次静态文件
hexo s   //在本地预览下
hexo d   //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上
</code></pre><p>   <img src="http://olg3gwtbm.bkt.clouddn.com/github2.png" alt=""></p>
<p>   访问服务器地址进行检查：<a href="http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名" target="_blank" rel="external">http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名</a> + .github.io</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul>
<li><p><strong>创建CNAME文件</strong></p>
<p>我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\TerryBlog 目录下。</p>
</li>
<li><p><strong>获取Github的ip地址</strong></p>
<p>实际获取的是你github上博客项目的ip（即：MuTouTQ.github.io），打开命令窗口，输入【ping MuTouTQ.github.io】来查看ip地址，并记录下来</p>
</li>
<li><p><strong>添加DNS Service记录</strong></p>
<p>我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/yuming.png" alt=""></p>
<p><strong>补充：</strong></p>
<p>如果你做完域名解析后，还是没法用你的域名访问，可以这项修改下：</p>
<p>打开你的Git Hub下的MuTouTQ.github.io仓库，找到Settings，点进去</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/gitset.png" alt=""></p>
<p>点进去后，找到这里，填入你的域名：mutouspace.cn   点击：SAVE  等一会就可以访问了。</p>
<p><img src="http://olg3gwtbm.bkt.clouddn.com/gp.png" alt=""></p>
<p>到此为止，我们的博客就成功配置完了！</p>
</li>
</ul>
<h1 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h1><ol>
<li>在G:\TerryBlog 路径下Git Bash执行命令： <code>hexo new &quot;my new post&quot;</code></li>
<li><p>在G:\TerryBlog\source_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐：MarkdownPad）。</p>
<p>hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明.</p>
<p>   title: my new post #可以改成中文的，如“新文章”<br>   date: 2015-04-08 22:56:29 #发表日期，一般不改动<br>   categories: blog #文章文类<br>   tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</p>
<p>   #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</p>
   <!--more-->
<p>   #在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>
</li>
<li><p>写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用<a href="mutouspace.cn">mutouspace.cn</a>进行访问。</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p>
<pre><code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
</code></pre><p>缩写：</p>
<pre><code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre><p>组合命令：</p>
<pre><code>hexo s -g #生成并本地预览
hexo d -g #生成并上传
</code></pre><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>  可以访问我的git博客来查看效果： mutouspace.cn</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>   <a href="http://www.jianshu.com/p/0a3cad3e8cdf" target="_blank" rel="external">基于Hexo+Github Pages的博客搭建</a></p>
<p>   <a href="http://opiece.me/2015/04/09/hexo-guide/" target="_blank" rel="external">使用Hexo搭建个人博客(基于hexo3.0)</a></p>
<p>   <a href="http://blog.liuxianan.com/build-blog-website-by-hexo-github.html#qian-yan" target="_blank" rel="external">使用hexo+github搭建免费个人博客详细教程</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> node </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[测试二]]></title>
      <url>http://mutouspace.cn/2017/02/17/%E6%B5%8B%E8%AF%95%E4%BA%8C/</url>
      <content type="html"><![CDATA[<div class="github-widget" data-repo="MuTouTQ/MuTouTQ.github.io"></div>

<!-- e.g. -->
<div class="github-widget" data-repo="MOxFIVE/hexo-theme-yelee"></div>]]></content>
      
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://mutouspace.cn/2017/02/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[测试一]]></title>
      <url>http://mutouspace.cn/2017/02/17/%E6%B5%8B%E8%AF%95%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""></excerpt></p>
<p>#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</p>
<a id="more"></a> 
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<p>#在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
