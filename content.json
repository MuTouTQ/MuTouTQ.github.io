{"meta":{"title":"Terry_Tian's Code日志","subtitle":"行是知之始，知是行之成。","description":"在山的这边，海的那边，有一只程序猿。。。","author":"Terry Tian","url":"http://mutouspace.cn"},"pages":[{"title":"关于我","date":"2017-02-17T07:17:36.000Z","updated":"2017-03-07T03:05:41.099Z","comments":false,"path":"about/index.html","permalink":"http://mutouspace.cn/about/index.html","excerpt":"","text":"strong a { color: #747474; } .player { text-align: center; margin: .5em auto 0; width: 100%; max-width: 22em; } .player br { display: none; } .sign { text-align: right; font-style: italic; } #ds-recent-visitors { margin: 0; padding: 0; } #ds-recent-visitors div img { display: inline-block !important; width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0,0,0, .15); } .article-entry img:first-child { display: block; } .article-entry span { font-family: Arial; } #ds-hot-posts { display: none; } 开博缘由: 通过写博客的方式，加深理解，显性化自己的隐性知识； 共享知识，吸引同好，交流进步。 欢迎交流: QQ：1015236187 Email:1015236187@qq.com CSDN：Terry_Tian Sina:Terry_Tian Github:MuTouTQ 最近访客："},{"title":"留言板","date":"2015-09-30T12:31:36.000Z","updated":"2017-03-06T12:43:43.913Z","comments":true,"path":"guestbook/index.html","permalink":"http://mutouspace.cn/guestbook/index.html","excerpt":"","text":"strong a { color: #747474; } .player { text-align: center; margin: .5em auto 0; width: 100%; max-width: 22em; } .player br { display: none; } .sign { text-align: right; font-style: italic; } #ds-recent-visitors { margin: 0; padding: 0; } #ds-recent-visitors div img { display: inline-block !important; width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0,0,0, .15); } .article-entry img:first-child { display: block; } .article-entry span { font-family: Arial; } #ds-hot-posts { display: none; } 如果大家有什么想说的，可以在这里留言！ —— Terry_Tian, 2017年2月17日 最近访客："},{"title":"标签","date":"2017-02-17T07:17:36.000Z","updated":"2017-03-06T12:41:55.552Z","comments":false,"path":"tags/index.html","permalink":"http://mutouspace.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-02-17T07:17:36.000Z","updated":"2017-03-06T12:41:07.314Z","comments":false,"path":"categories/index.html","permalink":"http://mutouspace.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA学习之JDBC","slug":"JAVA学习之JDBC","date":"2017-03-22T14:33:39.000Z","updated":"2017-03-22T15:02:16.334Z","comments":true,"path":"2017/03/22/JAVA学习之JDBC/","link":"","permalink":"http://mutouspace.cn/2017/03/22/JAVA学习之JDBC/","excerpt":"JDBC概述 JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。 JDBC与数据库驱动的关系：接口与实现的关系。 JDBC规范（掌握四个核心对象）： DriverManager:用于注册驱动 Connection: 表示与数据库创建的连接 Statement: 操作数据库sql语句的对象 ResultSet: 结果集或一张虚拟表","text":"JDBC概述 JDBC:java database connectivity SUN公司提供的一套操作数据库的标准规范。 JDBC与数据库驱动的关系：接口与实现的关系。 JDBC规范（掌握四个核心对象）： DriverManager:用于注册驱动 Connection: 表示与数据库创建的连接 Statement: 操作数据库sql语句的对象 ResultSet: 结果集或一张虚拟表 开发一个JDBC程序（重要） 创建数据库表，并向表中添加测试数据 create database day06;use day06; create table users( id int primary key auto_increment, name varchar(40), password varchar(40), email varchar(60), birthday date )character set utf8 collate utf8_general_ci; insert into users(name,password,email,birthday) values(‘zs’,’123456’,’zs@sina.com’,’1980-12-04’);insert into users(name,password,email,birthday) values(‘lisi’,’123456’,’lisi@sina.com’,’1981-12-04’);insert into users(name,password,email,birthday) values(‘wangwu’,’123456’,’wangwu@sina.com’,’1979-12-04’); 创建java project项目，添加数据库驱动（*.jar） 实现JDBC操作 - 注册驱动 - 创建连接 - 得到执行sql语句的Statement对象 - 执行sql语句，并返回结果 - 处理结果 - 关闭资源 example: public class demo01 { public static void main(String[] args) throws Exception{ // TODO Auto-generated method stub //1、注册驱动 //DriverManager.registerDriver(new com.mysql.jdbc.Driver()); //1.加载驱动 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //2、创建连接 Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mytest1&quot;, &quot;root&quot;, &quot;root&quot;); //3、得到执行sql语句的Statement对象 Statement stmt = conn.createStatement(); //4、执行sql语句，并返回结果 String sql = &quot;select id,name,password,email,birthday from users&quot;; ResultSet rs = stmt.executeQuery(sql); //5、处理结果 while (rs.next()) { System.out.println(rs.getObject(1)); System.out.println(rs.getObject(2)); System.out.println(rs.getObject(3)); System.out.println(rs.getObject(4)); System.out.println(rs.getObject(5)); } //6关闭资源 rs.close(); stmt.close(); conn.close(); } } JDBC常用的类和接口详解java.sql.Drivermanager类 : 创建连接 注册驱动 DriverManager.registerDriver(new com.mysql.jdbc.Driver());不建议使用原因有2个： 导致驱动被注册2次。 强烈依赖数据库的驱动jar 解决办法： Class.forName(&quot;com.mysql.jdbc.Driver&quot;); 与数据库建立连接 static Connection getConnection(String url, String user, String password) getConnection(&quot;jdbc:mysql://localhost:3306/day06&quot;, &quot;root&quot;, &quot;root&quot;); URL:SUN公司与数据库厂商之间的一种协议。 jdbc:mysql://localhost:3306/day06 协议 子协议 IP:端口号 数据库 mysql: jdbc:mysql://localhost:3306/day14 或者 jdbc:mysql:///day14（默认本机连接） oracle: jdbc:oracle:thin:@localhost:1521:sid Properties info = new Properties();//要参考数据库文档 info.setProperty(&quot;user&quot;, &quot;root&quot;); info.setProperty(&quot;password&quot;,&quot;root&quot;); getConnection(String url, Properties info) getConnection(String url) DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/day14?user=root&amp;password=root&quot;);","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://mutouspace.cn/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://mutouspace.cn/tags/JAVA/"},{"name":"JDBC","slug":"JDBC","permalink":"http://mutouspace.cn/tags/JDBC/"}]},{"title":"JAVA学习之JUnit","slug":"JAVA学习之JUnit","date":"2017-03-22T14:33:06.000Z","updated":"2017-03-23T06:04:28.077Z","comments":true,"path":"2017/03/22/JAVA学习之JUnit/","link":"","permalink":"http://mutouspace.cn/2017/03/22/JAVA学习之JUnit/","excerpt":"JUnit是什么？ JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。 JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。","text":"JUnit是什么？ JUnit是用于编写和运行可重复的自动化测试的开源测试框架， 这样可以保证我们的代码按预期工作。 JUnit可广泛用于工业和作为支架(从命令行)或IDE(如Eclipse)内单独的Java程序。 JUnit提供 断言测试预期结果。 测试功能共享通用的测试数据。 测试套件轻松地组织和运行测试。 图形和文本测试运行。 JUnit用于测试 整个对象 对象的一部分 - 交互的方法或一些方法 几个对象之间的互动(交互) JUnit的特点 JUnit是用于编写和运行测试的开源框架。 提供了注释，以确定测试方法。 提供断言测试预期结果。 提供了测试运行的运行测试。 JUnit测试让您可以更快地编写代码，提高质量 JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。 JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。 JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。 Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。 JUnit简单示例 使用工具：eclipse 测试类： Calculate.java public class Calculate { public int sum(int var1, int var2) { System.out.println(&quot;相加的值是: &quot; + var1 + &quot; + &quot; + var2); return var1 + var2; } } CalculateTest.java public class CalculateTest { Calculate calculation = new Calculate(); int sum = calculation.sum(2, 5); int testSum = 7; @Test public void testSum() { System.out.println(&quot;@Test sum(): &quot; + sum + &quot; = &quot; + testSum); assertEquals(sum, testSum); } } @Test的注解在 testSum()方法的上方。 这个注释指示该公共无效(public void)方法它所附着可以作为一个测试用例。因此，testSum()方法将用于测试公开方法 sum() 。 方法 assertEquals(sum, testsum)。assertEquals ([String message], object expected, object actual) 方法持有两个对象作为输入，并断言这两个对象相等。 如果要运行测试类，右键点击测试类，并选择 Run As -&gt; Junit Test。 JUnit注解在本节中，我们将提到支持在JUnit4基本注释，下表列出了这些注释的概括： 注解 描述@Testpublic void method() 测试注释指示该公共无效方法它所附着可以作为一个测试用例。@Beforepublic void method() Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。@BeforeClasspublic static void method()BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。@Afterpublic void method()After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等)@AfterClasspublic static void method()当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。@Ignorepublic static void method()当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。 让我们看看一个测试类，在上面提到的一些注解的一个例子。 AnnotationsTest.java package com.yiibai.junit; import static org.junit.Assert.*; import java.util.*; import org.junit.*; public class AnnotationsTest { private ArrayList testList; @BeforeClass public static void onceExecutedBeforeAll() { System.out.println(&quot;@BeforeClass: onceExecutedBeforeAll&quot;); } @Before public void executedBeforeEach() { testList = new ArrayList(); System.out.println(&quot;@Before: executedBeforeEach&quot;); } @AfterClass public static void onceExecutedAfterAll() { System.out.println(&quot;@AfterClass: onceExecutedAfterAll&quot;); } @After public void executedAfterEach() { testList.clear(); System.out.println(&quot;@After: executedAfterEach&quot;); } @Test public void EmptyCollection() { assertTrue(testList.isEmpty()); System.out.println(&quot;@Test: EmptyArrayList&quot;); } @Test public void OneItemCollection() { testList.add(&quot;oneItem&quot;); assertEquals(1, testList.size()); System.out.println(&quot;@Test: OneItemArrayList&quot;); } @Ignore public void executionIgnored() { System.out.println(&quot;@Ignore: This execution is ignored&quot;); } } 如果我们运行上面的测试，控制台输出将是以下几点： @BeforeClass: onceExecutedBeforeAll @Before: executedBeforeEach @Test: EmptyArrayList @After: executedAfterEach @Before: executedBeforeEach @Test: OneItemArrayList @After: executedAfterEach @AfterClass: onceExecutedAfterAll JUnit断言在本节中，我们将介绍一些断言方法。所有这些方法都受到 Assert 类扩展了java.lang.Object类并为它们提供编写测试，以便检测故障。下表中有一种最常用的断言方法的更详细的解释。 断言描述void assertEquals([String message], expected value, actual value)断言两个值相等。值可能是类型有 int, short, long, byte, char or java.lang.Object. 第一个参数是一个可选的字符串消息void assertTrue([String message], boolean condition)断言一个条件为真void assertFalse([String message],boolean condition)断言一个条件为假void assertNotNull([String message], java.lang.Object object)断言一个对象不为空(null)void assertNull([String message], java.lang.Object object)断言一个对象为空(null)void assertSame([String message], java.lang.Object expected, java.lang.Object actual)断言，两个对象引用相同的对象void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)断言，两个对象不是引用同一个对象void assertArrayEquals([String message], expectedArray, resultArray)断言预期数组和结果数组相等。数组的类型可能是 int, long, short, char, byte or java.lang.Object. 让我们看的一些前述断言的一个例子。 AssertionsTest.java package com.yiibai.junit; import static org.junit.Assert.*; import org.junit.Test; public class AssertionsTest { @Test public void test() { String obj1 = &quot;junit&quot;; String obj2 = &quot;junit&quot;; String obj3 = &quot;test&quot;; String obj4 = &quot;test&quot;; String obj5 = null; int var1 = 1; int var2 = 2; int[] arithmetic1 = { 1, 2, 3 }; int[] arithmetic2 = { 1, 2, 3 }; assertEquals(obj1, obj2); assertSame(obj3, obj4); assertNotSame(obj2, obj4); assertNotNull(obj1); assertNull(obj5); assertTrue(var1 var2); assertArrayEquals(arithmetic1, arithmetic2); } } 在以上类中我们可以看到，这些断言方法是可以工作的。 assertEquals() 如果比较的两个对象是相等的，此方法将正常返回；否则失败显示在JUnit的窗口测试将中止。 assertSame() 和 assertNotSame() 方法测试两个对象引用指向完全相同的对象。 assertNull() 和 assertNotNull() 方法测试一个变量是否为空或不为空(null)。 assertTrue() 和 assertFalse() 方法测试if条件或变量是true还是false。 assertArrayEquals() 将比较两个数组，如果它们相等，则该方法将继续进行不会发出错误。否则失败将显示在JUnit窗口和中止测试。 文章转载自：易百教程 [http:/www.yiibai.com]","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://mutouspace.cn/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://mutouspace.cn/tags/JAVA/"},{"name":"JUnit","slug":"JUnit","permalink":"http://mutouspace.cn/tags/JUnit/"}]},{"title":"JAVA学习之MySQL","slug":"JAVA学习之MySQL","date":"2017-03-21T13:52:33.000Z","updated":"2017-03-22T12:32:51.376Z","comments":true,"path":"2017/03/21/JAVA学习之MySQL/","link":"","permalink":"http://mutouspace.cn/2017/03/21/JAVA学习之MySQL/","excerpt":"本文主要记录MySQL数据库的简单使用。本部分记录了MySQL的安装、卸载，SQL语句的基础。 转载请注明：转载于Terry Tian的博客（www.mutouspace.cn）!","text":"本文主要记录MySQL数据库的简单使用。本部分记录了MySQL的安装、卸载，SQL语句的基础。 转载请注明：转载于Terry Tian的博客（www.mutouspace.cn）! 数据库概述数据库（DataBase，DB）：指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。(文件系统) 数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。 数据库软件应该为数据库管理系统，数据库是通过数据库管理系统创建和操作的。 数据库：存储、维护和管理数据的集合。 数据库的安装与配置安装与配置 卸载与修改密码卸载： 停止mysql服务 net stop mysql 启动mysql服务 net start mysql 卸载mysql 找到mysql 安装目录下的 my.ini datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“ 修改密码 运行cmd 安装成功了打开cmd –&gt; mysql -uroot -p你的密码 修改mysql root用户密码 1) 停止mysql服务 运行输入services.msc 停止mysql服务 或者 cmd --&gt; net stop mysql 2) 在cmd下 输入 mysqld –skip-grant-tables 启动服务器 光标不动 （不要关闭该窗口） 3) 新打开cmd 输入mysql -u root -p 不需要密码 use mysql; update user set password=password(&apos;abc&apos;) WHERE User=&apos;root&apos;; 4) 关闭两个cmd窗口 在任务管理器结束mysqld 进程 5) 在服务管理页面 重启mysql 服务 密码修改完成 sql概述 SQL：Structure Query Language。（结构化查询语言） Sql的分类DDL（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等； CREATE、 ALTER、DROP DML（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）； INSERT、 UPDATE、 DELETE DCL（Data Control Language）：数据控制语言，用来定义访问权限和安全级别； DQL（Data Query Language）：数据查询语言，用来查询记录（数据）。SELECT 注意：sql语句以;结尾 DDL:操作数据库、表、列等 使用的关键字：CREATE、 ALTER、 DROP example: CREATE TABLE emp ( id INT, NAME VARCHAR(50), gender VARCHAR(10), birthday DATE, entry_date DATE, job VARCHAR(100), salary DOUBLE, RESUME VARCHAR(200) ); -- 查看表的字段信息 DESC emp; -- 在emp TABLE中添加image列 ALTER TABLE emp ADD image BLOB; -- 修改job列，使其长度为60。 ALTER TABLE emp MODIFY job VARCHAR(60); -- 删除image列,一次只能删一列。 ALTER TABLE emp DROP image; -- 表名改为USER。 RENAME TABLE emp TO USER; -- 查看表格的创建细节 SHOW CREATE TABLE USER; -- 修改表的字符集为gbk ALTER TABLE USER CHARACTER SET gbk; -- 列名NAME修改为username ALTER TABLE USER CHANGE NAME username VARCHAR(100); DESC USER; -- 删除表 DROP TABLE USER ; DML操作(重要)插入操作：INSERT语法： INSERT INTO 表名（列名1，列名2 …）VALUES(列值1，列值2…);注意：列名与列值的类型、个数、顺序要一一对应。 可以把列名当做java中的形参，把列值当做实参。 值不要超出列定义的长度。 如果插入空值，请使用null 插入的日期和字符一样，都使用引号括起来。 练习 ： create table emp( id int, name varchar(100), gender varchar(10), birthday date, salary float(10,2), entry_date date, resume text ); INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume) VALUES(1,&apos;zhangsan&apos;,&apos;female&apos;,&apos;1990-5-10&apos;,10000,&apos;2015-5-5-&apos;,&apos;good girl&apos;); INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume) VALUES(2,&apos;lisi&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;); INSERT INTO emp(id,name,gender,birthday,salary,entry_date,resume) VALUES(3,&apos;wangwu&apos;,&apos;male&apos;,&apos;1995-5-10&apos;,10000,&apos;2015-5-5&apos;,&apos;good boy&apos;); -- 批量插入： INSERT INTO emp VALUES (4,&apos;zs&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL), (5,&apos;li&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL), (6,&apos;ww&apos;,&apos;m&apos;,&apos;2015-09-01&apos;,10000,&apos;2015-09-01&apos;,NULL); 修改操作 UPDATE语法：UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值 练习 ： -- 将所有员工薪水修改为5000元。 UPDATE emp SET salary=5000 -- 将姓名为’tom’的员工薪水修改为3000元。 UPDATE emp SET salary=3000 WHERE NAME=&apos;tom&apos;; -- 将姓名为’jerry’的员工薪水修改为4000元,gender改为female。 UPDATE emp SET salary=4000,gender=&apos;female&apos; WHERE NAME=&apos;jerry&apos;; -- 将蔡依林的薪水在原有基础上增加1000元。 UPDATE emp SET salary=salary+1000 WHERE NAME = &apos;蔡依林&apos;; 删除操作 DELETE语法 ： DELETE FROM 表名 【WHERE 列名=值】 练习 ： -- 删除表中名称为’zs’的记录。 DELETE FROM emp WHERE NAME=‘tom’; -- 删除表中所有记录。 DELETE FROM emp; -- 使用truncate删除表中记录。 TRUNCATE TABLE emp; DELETE 删除表中的数据，表结构还在;删除后的数据可以找回 TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。 删除的数据不能找回。执行速度比DELETE快。 DQL操作 DQL数据查询语言 （重要）数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。查询返回的结果集是一张虚拟表。 查询关键字：SELECT语法： SELECT 列名 FROM表名【WHERE –&gt; GROUP BY –&gt;HAVING–&gt; ORDER BY】 语法： SELECT selection_list /*要查询的列名称*/ FROM table_list /*要查询的表名称*/ WHERE condition /*行条件*/ GROUP BY grouping_columns /*对结果分组*/ HAVING condition /*分组后的行条件*/ ORDER BY sorting_columns /*对结果分组*/ LIMIT offset_start, row_count /*结果限定*/ 开始之前让我们先建几个表并插入数据 CREATE TABLE stu ( sid CHAR(6), sname VARCHAR(50), age INT, gender VARCHAR(50) ); INSERT INTO stu VALUES(&apos;S_1001&apos;, &apos;liuYi&apos;, 35, &apos;male&apos;); INSERT INTO stu VALUES(&apos;S_1002&apos;, &apos;chenEr&apos;, 15, &apos;female&apos;); INSERT INTO stu VALUES(&apos;S_1003&apos;, &apos;zhangSan&apos;, 95, &apos;male&apos;); INSERT INTO stu VALUES(&apos;S_1004&apos;, &apos;liSi&apos;, 65, &apos;female&apos;); INSERT INTO stu VALUES(&apos;S_1005&apos;, &apos;wangWu&apos;, 55, &apos;male&apos;); INSERT INTO stu VALUES(&apos;S_1006&apos;, &apos;zhaoLiu&apos;, 75, &apos;female&apos;); INSERT INTO stu VALUES(&apos;S_1007&apos;, &apos;sunQi&apos;, 25, &apos;male&apos;); INSERT INTO stu VALUES(&apos;S_1008&apos;, &apos;zhouBa&apos;, 45, &apos;female&apos;); INSERT INTO stu VALUES(&apos;S_1009&apos;, &apos;wuJiu&apos;, 85, &apos;male&apos;); INSERT INTO stu VALUES(&apos;S_1010&apos;, &apos;zhengShi&apos;, 5, &apos;female&apos;); INSERT INTO stu VALUES(&apos;S_1011&apos;, &apos;xxx&apos;, NULL, NULL); CREATE TABLE emp( empno INT, ename VARCHAR(50), job VARCHAR(50), mgr INT, hiredate DATE, sal DECIMAL(7,2), comm DECIMAL(7,2), deptno INT ) ; INSERT INTO emp VALUES(7369,&apos;SMITH&apos;,&apos;CLERK&apos;,7902,&apos;1980-12-17&apos;,800,NULL,20); INSERT INTO emp VALUES(7499,&apos;ALLEN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-20&apos;,1600,300,30); INSERT INTO emp VALUES(7521,&apos;WARD&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-02-22&apos;,1250,500,30); INSERT INTO emp VALUES(7566,&apos;JONES&apos;,&apos;MANAGER&apos;,7839,&apos;1981-04-02&apos;,2975,NULL,20); INSERT INTO emp VALUES(7654,&apos;MARTIN&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-28&apos;,1250,1400,30); INSERT INTO emp VALUES(7698,&apos;BLAKE&apos;,&apos;MANAGER&apos;,7839,&apos;1981-05-01&apos;,2850,NULL,30); INSERT INTO emp VALUES(7782,&apos;CLARK&apos;,&apos;MANAGER&apos;,7839,&apos;1981-06-09&apos;,2450,NULL,10); INSERT INTO emp VALUES(7788,&apos;SCOTT&apos;,&apos;ANALYST&apos;,7566,&apos;1987-04-19&apos;,3000,NULL,20); INSERT INTO emp VALUES(7839,&apos;KING&apos;,&apos;PRESIDENT&apos;,NULL,&apos;1981-11-17&apos;,5000,NULL,10); INSERT INTO emp VALUES(7844,&apos;TURNER&apos;,&apos;SALESMAN&apos;,7698,&apos;1981-09-08&apos;,1500,0,30); INSERT INTO emp VALUES(7876,&apos;ADAMS&apos;,&apos;CLERK&apos;,7788,&apos;1987-05-23&apos;,1100,NULL,20); INSERT INTO emp VALUES(7900,&apos;JAMES&apos;,&apos;CLERK&apos;,7698,&apos;1981-12-03&apos;,950,NULL,30); INSERT INTO emp VALUES(7902,&apos;FORD&apos;,&apos;ANALYST&apos;,7566,&apos;1981-12-03&apos;,3000,NULL,20); INSERT INTO emp VALUES(7934,&apos;MILLER&apos;,&apos;CLERK&apos;,7782,&apos;1982-01-23&apos;,1300,NULL,10); CREATE TABLE dept( deptno INT, dname VARCHAR(14), loc VARCHAR(13) ); INSERT INTO dept VALUES(10, &apos;ACCOUNTING&apos;, &apos;NEW YORK&apos;); INSERT INTO dept VALUES(20, &apos;RESEARCH&apos;, &apos;DALLAS&apos;); INSERT INTO dept VALUES(30, &apos;SALES&apos;, &apos;CHICAGO&apos;); INSERT INTO dept VALUES(40, &apos;OPERATIONS&apos;, &apos;BOSTON&apos;); 基础查询1.1 查询所有列 SELECT * FROM stu; 1.2 查询指定列 SELECT sid, sname, age FROM stu; 条件查询-- 查询性别为女，并且年龄&gt;=50的记录 SELECT * FROM stu WHERE gender=&apos;female&apos; AND age &gt;=50; -- 查询学号为S_1001，或者姓名为liSi的记录 SELECT * FROM stu WHERE sid =&apos;S_1001&apos; OR sname=&apos;liSi&apos;; -- 查询学号为S_1001，S_1002，S_1003的记录 SELECT * FROM stu WHERE sid IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;); -- 查询学号不是S_1001，S_1002，S_1003的记录 SELECT * FROM stu WHERE sid NOT IN (&apos;S_1001&apos;,&apos;S_1002&apos;,&apos;S_1003&apos;); -- 查询年龄为null的记录 SELECT * FROM stu WHERE age IS NULL; -- 查询年龄在20到40之间的学生记录 SELECT * FROM stu WHERE age&gt;=20 AND age&lt;=40; -- 或者 SELECT * FROM stu WHERE age BETWEEN 20 AND 40; -- 查询性别非男的学生记录 SELECT * FROM stu WHERE gender!=&apos;male&apos;; -- 或者 SELECT * FROM stu WHERE gender&lt;&gt;&apos;male&apos;; -- 或者 SELECT * FROM stu WHERE NOT gender=&apos;male&apos;; -- 查询姓名不为null的学生记录 SELECT * FROM stu WHERE sname IS NOT NULL; 模糊查询 当想查询姓名中包含a字母的学生时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。 通配符: _ ：任意一个字符 % ：任意0~n个字符 Example: -- 查询姓名由5个字母构成的学生记录 SELECT * FROM stu WHERE sname LIKE &apos;_____&apos;; -- 模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。 -- 3.2 查询姓名由5个字母构成，并且第5个字母为“i”的学生记录 SELECT * FROM stu WHERE sname LIKE &apos;____i&apos;; -- 3.3 查询姓名以“z”开头的学生记录 SELECT * FROM stu WHERE sname LIKE &apos;z%&apos;; -- 其中“%”匹配0~n个任何字母。 -- 3.4 查询姓名中第2个字母为“i”的学生记录 SELECT * FROM stu WHERE sname LIKE &apos;_i%&apos;; -- 3.5 查询姓名中包含“a”字母的学生记录 SELECT * FROM stu WHERE sname LIKE &apos;%a%&apos;; 字段控制查询SELECT * FROM emp; -- 去除重复记录 SELECT DISTINCT deptno,mgr FROM emp; -- 查看雇员的月薪与佣金之和 SELECT * ,sal+comm FROM emp; -- 过滤null 并起别名 SELECT * ,sal+IFNULL(comm,0) AS total FROM emp; 排序 order by 列名 asc(默认) desc -- 查询所有学生记录，按年龄升序排序 SELECT * FROM stu ORDER BY age ASC; -- 查询所有学生记录，按年龄降序排序 SELECT * FROM stu ORDER BY age DESC; -- 查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序 SELECT * FROM emp ORDER BY sal DESC,empno ASC; 聚合函数 聚合函数是用来做纵向运算的函数： COUNT()：统计指定列不为NULL的记录行数； MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算； MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算； SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0； AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0； -- 查询emp表中记录数： SELECT COUNT(*) AS cnt FROM emp; -- 查询emp表中有佣金的人数： SELECT COUNT(comm) cnt FROM emp; -- 注意，因为count()函数中给出的是comm列，那么只统计comm列非NULL的行数。 -- 查询emp表中月薪大于2500的人数： SELECT COUNT(*) FROM emp WHERE sal &gt; 2500; -- 统计月薪与佣金之和大于2500元的人数： SELECT COUNT(*) AS cnt FROM emp WHERE sal+IFNULL(comm,0) &gt; 2500; -- 查询有佣金的人数，有领导的人数： SELECT COUNT(comm), COUNT(mgr) FROM emp; -- 查询所有雇员月薪和： SELECT SUM(sal) FROM emp; -- 查询所有雇员月薪和，以及所有雇员佣金和： SELECT SUM(sal), SUM(comm) FROM emp; -- 查询所有雇员月薪+佣金和： SELECT SUM(sal+IFNULL(comm,0)) FROM emp; -- 统计所有员工平均工资： SELECT AVG(sal) FROM emp; -- MAX和MIN -- 查询最高工资和最低工资： SELECT MAX(sal), MIN(sal) FROM emp; 分组查询 注：凡和聚合函数同时出现的列名，一定要写在group by 之后 -- 查询每个部门的部门编号和每个部门的工资和： SELECT deptno, SUM(sal) FROM emp GROUP BY deptno; -- 查询每个部门的部门编号以及每个部门的人数： SELECT deptno,COUNT(*) FROM emp GROUP BY deptno; -- 查询每个部门的部门编号以及每个部门工资大于1500的人数： SELECT deptno,COUNT(*) FROM emp WHERE sal&gt;1500 GROUP BY deptno; -- 查询工资总和大于9000的部门编号以及工资和： SELECT deptno, SUM(sal) FROM emp GROUP BY deptno HAVING SUM(sal) &gt; 9000; 注： having与where的区别: 1.having是在分组后对数据进行过滤. where是在分组前对数据进行过滤 2.having后面可以使用聚合函数(统计函数) where后面不可以使用聚合函数。 WHERE是对分组前记录的条件，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对分组后数据的约束。 LIMIT LIMIT用来限定查询结果的起始行，以及总行数。 -- 查询5行记录，起始行从0开始 SELECT * FROM emp LIMIT 0, 5; -- 查询10行记录，起始行从3开始 SELECT * FROM emp LIMIT 3, 10;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://mutouspace.cn/categories/数据库/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://mutouspace.cn/tags/JAVA/"},{"name":"MySQL","slug":"MySQL","permalink":"http://mutouspace.cn/tags/MySQL/"},{"name":"数据库","slug":"数据库","permalink":"http://mutouspace.cn/tags/数据库/"}]},{"title":"Git学习笔记系列","slug":"Git学习笔记系列","date":"2017-03-09T14:07:37.000Z","updated":"2017-03-10T11:37:04.436Z","comments":true,"path":"2017/03/09/Git学习笔记系列/","link":"","permalink":"http://mutouspace.cn/2017/03/09/Git学习笔记系列/","excerpt":"Git简介Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。 Git有什么特点？简单来说就是：高端大气上档次！","text":"Git简介Git是什么？Git是目前世界上最先进的分布式版本控制系统（没有之一）。 Git有什么特点？简单来说就是：高端大气上档次！ 那什么是版本控制系统？ 如果你用Microsoft Word写过长篇大论，那你一定有这样的经历： 想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样： 过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。 看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。 更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。 于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？ 这个软件用起来就应该像这个样子，能记录每次文件的改动： 版本 用户 说明 日期 1 张三 删除了软件服务条款5 7/12 10:38 2 张三 增加了License人数限制 7/12 18:09 3 李四 财务部门调整了合同金额 7/13 9:51 4 张三 延长了免费升级周期 7/14 15:17 这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。 参考廖雪峰的网站：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000 安装Git要使用Git，第一步当然是安装Git了。由于笔者使用的windows系统，所以此处只介绍在Windows环境下如何安装Git。 在Windows上安装Git 想要在Windows下安装Git，首先要下载Git安装包，用户可以从https://git-scm.com/download/下载，然后按默认选项安装即可。 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 安装完成后，还需要最后一步设置，在命令行输入： $ git config - -global user.name &quot;Your Name&quot; $ git config - -global user.email &quot;email@example.com&quot; 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。 注意: git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 创建版本库什么是版本库呢？ 版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录： $ mkdir tq1 $ cd tq1 注意：Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。 第二步，通过git init命令把这个目录变成Git可以管理的仓库： $ git init Initialized empty Git repository in F：/AndroidProject2/tq1/.git/ 瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。 把文件添加到版本库 现在我们编写一个readme.txt文件，内容如下： Git is a version control system. Git is free software. 一定要放到tq1目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。 第一步，用命令git add告诉Git，把文件添加到仓库： $ git add readme.txt 执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。 第二步，用命令git commit告诉Git，把文件提交到仓库： $ git commit -m &quot;wrote a readme file&quot; [master (root-commit) cb926e7] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 嫌麻烦不想输入-m “xxx”行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。 git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如： $ git add file1.txt $ git add file2.txt file3.txt $ git commit -m &quot;add 3 files.&quot; 小结 现在总结一下今天学的两点内容： 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 第一步，使用命令git add ，注意，可反复多次使用，添加多个文件； 第二步，使用命令git commit，完成。 远程仓库到目前为止，我们已经掌握了如何在Git仓库里对一个文件进行时光穿梭，你再也不用担心文件备份或者丢失的问题了。 可是有用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN里早就有了，没看出Git有什么特别的地方。 没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。为了保证你现在所学的Git物超所值，将来绝对不会后悔，同时为了打击已经不幸学了SVN的童鞋，本章开始介绍Git的杀手级功能之一（注意是之一，也就是后面还有之二，之三……）：远程仓库。 Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。 你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？ 其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。 实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。 完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫Coding的神奇的网站，这个网站就是提供Git仓库托管服务的，所以，只要注册一个Coding账号，就可以免费获得Git远程仓库。 在继续阅读后续内容前，请自行注册Coding账号。由于你的本地Git仓库和Coding仓库之间的传输是通过SSH加密的，所以，需要一点设置： 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key： $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第2步：登陆Coding，打开“设置”，“部署公钥”页面： 然后，点“新建部署公钥”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 点“添加”，你就应该看到已经添加的Key： 为什么Coding需要SSH Key呢？因为Coding需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，Coding只要知道了你的公钥，就可以确认只有你自己才能推送。 当然，Coding允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到Conding，就可以在每台电脑上往Coding推送了。 最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。 如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。 确保你拥有一个Coding账号后，我们就即将开始远程仓库的学习。 添加远程库现在的情景是，你已经在本地创建了一个Git仓库后，又想在Coding创建一个Git仓库，并且让这两个仓库进行远程同步，这样，Coding上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。 首先，登陆Coding，然后，在右上角的“+”找到“项目”按钮，创建一个新的仓库： 在 项目名称 填入tq1，其他保持默认设置，点击“创建项目”按钮，就成功地创建了一个新的Git仓库，目前，在Coding的这个tq1仓库还是空的，点击左侧“代码”选项： Coding告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到Coding仓库。 现在，我们根据Coding的提示，在本地的tq1仓库下运行命令： git remote add origin git@git.coding.net:Mu_TQ/tq1.git 请千万注意，把上面的Mu_TQ替换成你自己的Coding账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。 下一步，就可以把本地库的所有内容推送到远程库上： $ git push -u origin master Counting objects: 19, done. Delta compression using up to 4 threads. Compressing objects: 100% (19/19), done. Writing objects: 100% (19/19), 13.73 KiB, done. Total 23 (delta 6), reused 0 (delta 0) To git@github.com:michaelliao/learngit.git * [new branch] master -&gt; master Branch master set up to track remote branch master from origin. 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样： 从现在起，只要本地作了提交，就可以通过命令： $ git push origin master 把本地master分支的最新修改推送至Coding，现在，你就拥有了真正的分布式版本库！ SSH警告 当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告： The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established. RSA key fingerprint is xx.xx.xx.xx.xx. Are you sure you want to continue connecting (yes/no)? 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。 Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了： Warning: Permanently added &apos;github.com&apos; (RSA) to the list of known hosts. 这个警告只会出现一次，后面的操作就不会有任何警告了。 如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。 小结 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git； 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！","categories":[{"name":"教程","slug":"教程","permalink":"http://mutouspace.cn/categories/教程/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mutouspace.cn/tags/Git/"}]},{"title":"软件分享篇（Windows10）","slug":"软件分享篇","date":"2017-03-06T14:00:41.899Z","updated":"2017-03-02T15:28:16.622Z","comments":true,"path":"2017/03/06/软件分享篇/","link":"","permalink":"http://mutouspace.cn/2017/03/06/软件分享篇/","excerpt":"今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！ 转载请注明：转载于Terry Tian的博客（www.mutouspace.cn）!","text":"今晚有点晚了，就不撸代码了，决定把我电脑里常用的软件、工具分享给大家，这些软件真的很好用，不信你可以试一试！ 转载请注明：转载于Terry Tian的博客（www.mutouspace.cn）! 安全杀毒： TT电脑里用的杀毒防护软件是Windows系统自带的Windows Defender，说实话，现在Windows自带的杀软已经很好了，具体好到哪，大家可以自行百度、google。软件界面简单、实用，还没有广告，界面如下： 清理软件我用的是口碑很好的 CCleaner,功能完全足够你使用了！截图如下： 对于非一般的用户，特别是计算机专业的学生，真的不是很建议在电脑了安装些安全卫士、管家、毒霸等软件的！ 开发工具 Android Studio：对于这款软件大家一定都不陌生，特别是对于一位安卓开发人员，Google的亲儿子，好好享受吧！ eclipse：一款插件丰富的开发工具，java开发者用的挺多，以前也用于开发安卓，可惜Google生了个儿子。 SQLite Expert Personal：一款可以查看数据表中数据的软件，安卓开发人员都值得拥有！ 系统工具 chrome：好用的不能再好用的浏览器。插件丰富，但需要科学上网。 缺点就是在国内没法云备份自己的收藏夹。推荐大家可以在安装一款360极速浏览器、或者QQ浏览器来备份自己的收藏夹。 MarkdownPad 2：我认为这可能是Windows系统下最好用的markdown书写软件了，可以去官网下载。 Seer:是一款 Windows 下的文件预览工具，可以无需打开图片、音乐、视频、压缩包等文件就能预览到内容，只需点一下空格。下载地址：http://www.appinn.com/seer-windows/。 护眼宝：是一款护眼的工具，下载地址：http://www.huyanbao.com/#top。 Clover:Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。 ADSafe：ADSafe是一款好用的广告屏蔽软件！ HoneyView:HoneyView是一个支持多种格式的极速图像浏览器。 她同时支持不解压浏览ZIP、RAR和7z压缩包中的图片。 她可以显示图片的GPS信息并在Google Maps中查看该地点，同时用户可以储存喜爱的照片。 影音工具 网易云音乐（UWP）：逼格漫漫的音乐播放器。 Potplayer：PotPlayer诚意满满的视频播放器。 下载工具 IDM：Internet Download Manager(简称“IDM”)是国外的一款下载工具，提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下传到一半的软件。 EagleGet:EagleGet（亦称 EG Download Accelerator）是一个用于 Windows 系统的下载管理器，它是免费软件。EagleGet 使用多线程技术，支持从Youtube、Dailymotion、Facebook、Vimeo等视频网站下载 MP4 和 FLV 格式视频。EagleGet 是一个拥有简洁界面和功能的免费的新下载管理器。 迅雷：国内用户电脑中常备的下载软件，大多数网站也都支持迅雷下载。但我真的越来越讨厌迅雷了，不仅下载速度限速，界面也越来越复杂，广告还多，越来越丧失了一款下载软件的本心。 分享到这里就结束了，如果大家有什么疑问可以留言，有好的软件推荐给我，也可以留言，谢谢阅读！","categories":[{"name":"分享","slug":"分享","permalink":"http://mutouspace.cn/categories/分享/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://mutouspace.cn/tags/分享/"}]},{"title":"胡歌为什么会有今天的高度？","slug":"胡歌为什么会有今天的高度？","date":"2017-02-19T04:31:07.000Z","updated":"2017-02-19T04:32:16.015Z","comments":true,"path":"2017/02/19/胡歌为什么会有今天的高度？/","link":"","permalink":"http://mutouspace.cn/2017/02/19/胡歌为什么会有今天的高度？/","excerpt":"strong a { color: #747474; } .player { text-align: center; margin: .5em auto 0; width: 100%; max-width: 22em; } .player br { display: none; } .sign { text-align: right; font-style: italic; } #ds-recent-visitors { margin: 0; padding: 0; } #ds-recent-visitors div img { display: inline-block !important; width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0,0,0, .15); } .article-entry img:first-child { display: block; } .article-entry span { font-family: Arial; } #ds-hot-posts { display: none; } 本文转载于微信公众号：小林分享 藏书如山积，读书如水流。山形有限度，水流无时休。 —— Terry_Tian, 2017年2月19日 在娱乐圈里，想通过大荧幕红透半边天的人有很多。 但能够沉下心，通过学习和阅读来提升自己的不多。 胡歌算一个。","text":"strong a { color: #747474; } .player { text-align: center; margin: .5em auto 0; width: 100%; max-width: 22em; } .player br { display: none; } .sign { text-align: right; font-style: italic; } #ds-recent-visitors { margin: 0; padding: 0; } #ds-recent-visitors div img { display: inline-block !important; width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0,0,0, .15); } .article-entry img:first-child { display: block; } .article-entry span { font-family: Arial; } #ds-hot-posts { display: none; } 本文转载于微信公众号：小林分享 藏书如山积，读书如水流。山形有限度，水流无时休。 —— Terry_Tian, 2017年2月19日 在娱乐圈里，想通过大荧幕红透半边天的人有很多。 但能够沉下心，通过学习和阅读来提升自己的不多。 胡歌算一个。 去读书，是他多年想做而不得做的事。 时光悄然流逝，从曾经的少年心性，到如今的睿智成熟。 胡歌唯一没变的，就是对学习的向往。 甚至决定为了深造的事宜，暂时息影两年。 其实，这个决定早就有端倪，春晚结束后有媒体采访胡歌，他说：“2017年将作为自己的学习阶段，继续深造。” 果然，不久之后，就有人在美国大使馆相逢正在办理签证的胡歌，也有人在机场拍下这张照片。 手里抱着书，翘着二郎腿，身旁时贴满行李条的行李箱和背包，内心却是“独钓寒江雪”的怡然自得。 2005年，胡歌因为成功塑造了电视剧《仙剑奇侠传》中豪爽深情的“李逍遥”一角而成名，迅速跻身“四大小生”头列，广告签约不断，无数粉丝热捧。 原本蓄力满满，却一瞬跌入谷底。 2006年，胡歌和助理乘坐的汽车突然和另一货车发生碰撞，助理当场死亡，胡歌也遭遇重创。 那段时间，是胡歌有记忆的人生里最痛苦的岁月。 为了让自己振作起来，胡歌开始大量的阅读，写专栏。 在这篇题为《照镜子》的专栏中，胡歌写： 车祸创伤了我的容貌，也冲击了我的内心。 每次当我战战兢兢拿起镜子的时候，我都渴望能在镜子里寻找到勇气和力量。 镜子的语言简洁而充满了智能，除了我自己，没有人能够让我真正重新站立。 如果皮囊难以修复，就用思想去填满它吧。 嗯，用思想慢慢填充皮囊。 他开始摄影、参与公益，等待伤口被修复，也等待被击垮的自信重新建立起来。 丢了少年容颜，拾得一个更广阔的世界，在书里，安心的当自己的主演。 2007年6月22日，胡歌宣布复出。 重回大众视线的胡歌，与车祸之前相比，脸上多了几许忧郁。 为了遮盖自己右眼的伤疤，他全程带着黑框眼镜。 在拍仙三的时候，也用头发遮住自己手上的眼骨，可眼神里却是历经爱恨生死之后的沧桑。 从那之后，他旅行、阅读、修复容貌…… 2015年，带着饱满思想回归的胡歌，强势推出了《琅琊榜》和《伪装者》两部作品，重新回归大众视野。 也被很多人调侃说，二红。 彼时，他深陷磨难，几度忧伤和消沉。 此时，他褪去青涩，愈加真实和沉稳。 如今，胡歌是娱乐圈公认的高情商，阅读塑造了他严密的思维逻辑，也让他在浮躁复杂的娱乐圈里，游走自如。 2016年白玉兰颁奖典礼上，胡歌成为该奖项的首个80后视帝。 台下坐着无数前辈，更让人为难的是，私下最好的朋友，也是竞争对手的大哥靳东，也在台下坐着，主持人主动挑起话题： 拿到视帝的胡歌想对靳东说点什么呢？ 胡歌的回应就很棒： 在戏里我们是家人，戏外我们也是家人，这个奖项不管谁拿都是咱家的。我刚和敏涛姐说，不管是谁拿了奖，这个奖都是挂在咱们家的墙上。 没有人会好运一辈子，也许生命中那些独自隐忍的时刻，就是让一个人更接近自己的机会。 胡歌在阅读里得到新生、填补灵魂，给了我们对于“阅读的意义”最好诠释： 阅读是为了让我们更好的认识自己，成为更好的自己。","categories":[{"name":"美文","slug":"美文","permalink":"http://mutouspace.cn/categories/美文/"}],"tags":[{"name":"美文","slug":"美文","permalink":"http://mutouspace.cn/tags/美文/"},{"name":"杂记","slug":"杂记","permalink":"http://mutouspace.cn/tags/杂记/"},{"name":"转载","slug":"转载","permalink":"http://mutouspace.cn/tags/转载/"}]},{"title":"使用Hexo+github建设个人博客教程","slug":"使用Hexo-github建设个人博客教程","date":"2017-02-18T07:46:58.000Z","updated":"2017-02-19T03:21:32.577Z","comments":true,"path":"2017/02/18/使用Hexo-github建设个人博客教程/","link":"","permalink":"http://mutouspace.cn/2017/02/18/使用Hexo-github建设个人博客教程/","excerpt":"前言博主本来打算在Coding上搭建自己的Ghost博客，由于以前没有搭建博客的经验，就在网上百度教程，但很遗憾，教程很少，写的也比较简单，最终在别人的推荐下，选择了Hexo搭建静态博客。 教程思路： 列出博客搭建环境+所需工具； 环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架； 创建Hexo项目，并本地运行查看效果 修改项目配置文件（根目录下的_config.yml文件） 安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件 将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章） 总结","text":"前言博主本来打算在Coding上搭建自己的Ghost博客，由于以前没有搭建博客的经验，就在网上百度教程，但很遗憾，教程很少，写的也比较简单，最终在别人的推荐下，选择了Hexo搭建静态博客。 教程思路： 列出博客搭建环境+所需工具； 环境的配置与工具的安装简述，以及简单的使用教程，安装Git、Node.js环境以及Hexo框架； 创建Hexo项目，并本地运行查看效果 修改项目配置文件（根目录下的_config.yml文件） 安装Hexo框架主题（推荐：Next或yelee主题，本人用的yelee），对主题进行配置，主要是修改theme目录下的_config.yml文件 将本地设置好的Hexo项目发布到Github Pages上（包括绑定自己的域名）（这里会介绍如何写文章） 总结 准备工作在搭建博客时，你需要做以下准备： 确定自己的系统为Windows;(因为博主用的系统是Windows10，为了避免浪费您的时间，如果不是Windows系统就不要看了。) Git下载，node.js下载。 本文所使用的环境： Windows 10 Git version 2.11.1.windows.1 node.js v6.9.5 LTS hexo 开始搭建博客Git下载安装及简单实用为什么要在电脑上安装Git呢？我相信大多计算机专业的同学对Git的应该不陌生了，Git可以说是现如今最好用的、最先进的分布式版本控制系统（没有之一）。Git在接下来的环境部署及部署博客到github Pages时都是需要的。大家如果有兴趣可以阅读我的博客（Git的简单使用），对Git进行简单的了解。如果了解Git也没有关系，只要你按照教程一步一步来也可以。 下载Git 我们可以在Git的官网下载我们所需要的git，我选择的是最新版的Git Windows X64 版本。 安装Git Git的安装也很简单，就像安装我们平时所需要的软件一样，教程参考：Git的安装。 Git的简单实用 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 第一步，使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 第二步，使用命令git commit，完成。 我们在这里不太需要git的命令操作，一般只需要git的的shell窗口进行一些操作。 node.js的下载安装下载 打开 Nodejs 下载页面，选择合适你当前系统版本的安装包（建议使用 LTS 版本的）。 安装 双击安装文件 -&gt; 下一步 -&gt; 下一步… 【具体操作请参考网上的一篇文章：Node.js安装及环境配置之Windows篇】 Hexo框架的安装首先我们可以看一下hexo的官网，了解一下hexo。 Windows中的安装 打开命令行 Win+R或者点击开始按钮–&gt;运行–&gt;输入“cmd”; 用 Git Bash 输入命令 npm install hexo-cli -g 输入完命令后就开始了hexo的安装，这里可能需要等待一段时间，时间不确定，只要不报错就可以了。 创建Hexo本地博客 接下来我们在一个本地盘自定义路径中创建一个文件夹作为我的项目文件，我在这里选择了在G盘下新建了一个名为TerryBlog的文件夹，作为我的项目文件，路径为【G:\\TerryBlog】.在G盘下，点击鼠标右键–&gt;Git Bash，打开命令输入框。输入命令如下： hexo init TerryBlog //hexo init +你的项目名称，如我的为TerryBlog 执行完上述命令后，我们就创建了TerryBlog文件夹，进入刚创建的TerryBlog项目目录，命令操作如下： cd TerryBlog //进入TerryBlog目录 或者直接在TerryBlog文件夹下，再点击鼠标右键–&gt;Git Bash，打开命令输入框。再输入以下命令： npm install 安装完成之后，【G:\\TerryBlog】目录结构是这样的： 到此为止，一个博客就已经搭建好了，现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令如下： hexo s 在浏览器中输入：http://localhost:4000/进行访问，效果图如下： ** 如果要停止 hexo 服务：在 Git Bash 下按 Ctrl + C即可** 到这里我们简单的hexo博客基本就完成一部分了！是不是很开心，如果不进行主题美化的话，我们马上就可以有一个自己的博客了。 修改项目配置文件 在这里我们修改的是【G:\\TerryBlog】路径下的 _config.yml 站点主题配置文件，我的配置如下： 注意：修改之前最好备份一下。 # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site 这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的 title: Terry_Tian Code #网站标题 subtitle: 行是知之始 知是行之成 #网站副标题 description: 在山的这边，海的那边，有一只程序猿。。。 #描述 author: Terry Tian #博主名字 avatar: http://olg3gwtbm.bkt.clouddn.com/head.jpg #博主头像 email: 1015236187@qq.com #邮箱 language: zh-Hans #语言 timezone: #网站时区。Hexo默认使用电脑时区 # URL,这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息 ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: http://mutouspace.cn/ root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag default_category: uncategorized category_map: tag_map: # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: yelee # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git branch: master search: path: search.xml field: post 做完这一些之后再在Git Bash 命令框中，输入 hexo s 重新启动服务，在浏览器中输入：http://localhost:4000/进行访问,查看一下效果。 安装Hexo框架主题 在上一步完成后，你会发现虽然改了一部分配置，但页面还是很吃藕，接下来，咱们就要给咱们的博客美美容了。hexo的主题有很多，大家可以去这里选一下，hexo-theme：https://hexo.io/themes/. 我选择的是yelee主题：yelee 还是让 Git Bash 保持在【G:\\TerryBlog】目录下，然后输入命令： git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee 这样就在 【G:\\TerryBlog\\themes】目录下生成了一个 yelee 文件夹，里面有我们刚刚 clone 下来的主题内容。 我们现在要修改【G:\\TerryBlog】目录下的项目配置文件：_config.yml，把对应的主题目录名改下，主要是将配置中的 theme: yelee修改。 注意：该配置文件中的键值之间一定要有空格，否则轻则没有作用，重则报错，无法启动。 更改主题目录名后，我们还要重新生成主题静态内容，继续在 Git Bash 中输入命令输入如下命令： hexo g //重新生成静态博客的所有内容 hexo s //重启 hexo 本地服务 重新访问：http://localhost:4000/，看一下效果. 修改Hexo框架主题 上一步完成后，看到的是yelee的默认主题，这里我们可以再次配置一下，修改的是【G:\\TerryBlog\\themes\\yelee】路径下的 _config.yml文件。这里我们可以跟着Yelee 主题使用说明来修改。 发布到Github Pages上创建Github Pages并SSH授权 现在假设你已经有一个 Gtihub 账号，你还需要一个特别的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：MuouTQ，那我要创建的仓库名字完整滴填写是：MuouTQ.github.io，具体效果如下图： 仔细的人可能看到，你的仓库名根本不和你的用户名一样，由于我之前已经创建了一个这样特别的仓库，再创建一个就会提示错误，为了演示方便，所以删了一个T。 创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上。 【具体可以参考网上的一篇文章：Git安装及SSH Key管理之Windows篇】 现在用记事本打开公钥，复制文件中的所有内容。访问：https://github.com/settings/ssh， Title：自己随便取 Key：把刚刚复制的都粘贴进来 把本地的博客内容同步到 Github 上 要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件： cd G:\\TerryBlog //进入TerryBlog项目目录 上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下； npm/cnpm install hexo-server --save //创建 npm/cnpm install hexo-deployer-git --save //安装自动部署发布工具 编辑TerryBlog的项目配置文件：_config.yml 官网对此配置的介绍：https://hexo.io/zh-cn/docs/configuration.html 主要改这里（一般在最后面）： # Deployment ## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。 ## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。 ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:MuTouTQ/MuTouTQ.github.io.git branch: master 编辑完项目配置文件后我们需要重新部署： cd G:\\TerryBlog //进入TerryBlog项目目录 上一步，我们可以到 G:\\TerryBlog 路径下 Git Bash 一下； hexo clean//先清除掉已经生成的旧文件 hexo g //再生成一次静态文件 hexo s //在本地预览下 hexo d //本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上 访问服务器地址进行检查：http://MuTouTQ.github.io/，该访问地址是之前在github上的创建的仓库名称，输入你的github用户名 + .github.io 绑定域名 创建CNAME文件 我们要一个 CNAME 文件（文件名叫 CNAME，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如：mutouspace.cn。这个CNAME可以你先建一个txt文件，把后缀名去掉），把该文件放在 G:\\TerryBlog 目录下。 获取Github的ip地址 实际获取的是你github上博客项目的ip（即：MuTouTQ.github.io），打开命令窗口，输入【ping MuTouTQ.github.io】来查看ip地址，并记录下来 添加DNS Service记录 我的域名是腾讯云上买的，用的腾讯云的域名解析，将ip地址和你买的域名绑定就好了，域名解析后需要等待几分钟才能被访问 补充： 如果你做完域名解析后，还是没法用你的域名访问，可以这项修改下： 打开你的Git Hub下的MuTouTQ.github.io仓库，找到Settings，点进去 点进去后，找到这里，填入你的域名：mutouspace.cn 点击：SAVE 等一会就可以访问了。 到此为止，我们的博客就成功配置完了！ 发表一篇文章 在G:\\TerryBlog 路径下Git Bash执行命令： hexo new &quot;my new post&quot; 在G:\\TerryBlog\\source_post中打开my-new-post.md，打开方式使用记事本或notepad++（推荐：MarkdownPad）。 hexo中写文章使用的是Markdown，没接触过的可以看下Markdown语法说明. title: my new post #可以改成中文的，如“新文章” date: 2015-04-08 22:56:29 #发表日期，一般不改动 categories: blog #文章文类 tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog #这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上 #在之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。 写完文章后，你可以使用1. hexo g生成静态文件。2. hexo s在本地预览效果。3.hexo d同步到github，然后使用mutouspace.cn进行访问。 总结常用hexo命令常见命令 hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 缩写： hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 组合命令： hexo s -g #生成并本地预览 hexo d -g #生成并上传 最终效果 可以访问我的git博客来查看效果： mutouspace.cn 参考 基于Hexo+Github Pages的博客搭建 使用Hexo搭建个人博客(基于hexo3.0) 使用hexo+github搭建免费个人博客详细教程","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://mutouspace.cn/categories/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://mutouspace.cn/tags/Git/"},{"name":"Hexo","slug":"Hexo","permalink":"http://mutouspace.cn/tags/Hexo/"},{"name":"node","slug":"node","permalink":"http://mutouspace.cn/tags/node/"},{"name":"github","slug":"github","permalink":"http://mutouspace.cn/tags/github/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-17T11:51:30.000Z","updated":"2017-03-06T14:14:31.510Z","comments":true,"path":"2017/02/17/hello-world/","link":"","permalink":"http://mutouspace.cn/2017/02/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://mutouspace.cn/tags/Hexo/"}]},{"title":"测试二","slug":"测试二","date":"2017-02-17T11:51:30.000Z","updated":"2017-02-17T13:18:19.296Z","comments":true,"path":"2017/02/17/测试二/","link":"","permalink":"http://mutouspace.cn/2017/02/17/测试二/","excerpt":"","text":"","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://mutouspace.cn/tags/测试/"}]},{"title":"测试一","slug":"测试一","date":"2017-02-17T11:44:07.000Z","updated":"2017-02-18T05:29:46.604Z","comments":true,"path":"2017/02/17/测试一/","link":"","permalink":"http://mutouspace.cn/2017/02/17/测试一/","excerpt":"#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上","text":"#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上 #在之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。","categories":[{"name":"测试","slug":"测试","permalink":"http://mutouspace.cn/categories/测试/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://mutouspace.cn/tags/测试/"}]}]}